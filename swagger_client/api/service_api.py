# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cosmos_base_node_v1_beta1_config(self, **kwargs):  # noqa: E501
        """Config queries for the operator configuration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_base_node_v1_beta1_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cosmos_base_node_v1_beta1_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cosmos_base_node_v1_beta1_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def cosmos_base_node_v1_beta1_config_with_http_info(self, **kwargs):  # noqa: E501
        """Config queries for the operator configuration.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_base_node_v1_beta1_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20022
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cosmos_base_node_v1_beta1_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cosmos/base/node/v1beta1/config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20022',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cosmos_base_tendermint_v1_beta1_abci_query(self, **kwargs):  # noqa: E501
        """ABCIQuery defines a query handler that supports ABCI queries directly to the application, bypassing Tendermint completely. The ABCI query must contain a valid and supported path, including app, custom, p2p, and store.  # noqa: E501

        Since: cosmos-sdk 0.46  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_base_tendermint_v1_beta1_abci_query(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data:
        :param str path:
        :param str height:
        :param bool prove:
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cosmos_base_tendermint_v1_beta1_abci_query_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cosmos_base_tendermint_v1_beta1_abci_query_with_http_info(**kwargs)  # noqa: E501
            return data

    def cosmos_base_tendermint_v1_beta1_abci_query_with_http_info(self, **kwargs):  # noqa: E501
        """ABCIQuery defines a query handler that supports ABCI queries directly to the application, bypassing Tendermint completely. The ABCI query must contain a valid and supported path, including app, custom, p2p, and store.  # noqa: E501

        Since: cosmos-sdk 0.46  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_base_tendermint_v1_beta1_abci_query_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str data:
        :param str path:
        :param str height:
        :param bool prove:
        :return: InlineResponse20023
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['data', 'path', 'height', 'prove']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cosmos_base_tendermint_v1_beta1_abci_query" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'data' in params:
            query_params.append(('data', params['data']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501
        if 'height' in params:
            query_params.append(('height', params['height']))  # noqa: E501
        if 'prove' in params:
            query_params.append(('prove', params['prove']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cosmos/base/tendermint/v1beta1/abci_query', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20023',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cosmos_base_tendermint_v1_beta1_get_block_by_height(self, height, **kwargs):  # noqa: E501
        """GetBlockByHeight queries block for given height.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_base_tendermint_v1_beta1_get_block_by_height(height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str height: (required)
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cosmos_base_tendermint_v1_beta1_get_block_by_height_with_http_info(height, **kwargs)  # noqa: E501
        else:
            (data) = self.cosmos_base_tendermint_v1_beta1_get_block_by_height_with_http_info(height, **kwargs)  # noqa: E501
            return data

    def cosmos_base_tendermint_v1_beta1_get_block_by_height_with_http_info(self, height, **kwargs):  # noqa: E501
        """GetBlockByHeight queries block for given height.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_base_tendermint_v1_beta1_get_block_by_height_with_http_info(height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str height: (required)
        :return: InlineResponse20025
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['height']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cosmos_base_tendermint_v1_beta1_get_block_by_height" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `cosmos_base_tendermint_v1_beta1_get_block_by_height`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'height' in params:
            path_params['height'] = params['height']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cosmos/base/tendermint/v1beta1/blocks/{height}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20025',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cosmos_base_tendermint_v1_beta1_get_latest_block(self, **kwargs):  # noqa: E501
        """GetLatestBlock returns the latest block.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_base_tendermint_v1_beta1_get_latest_block(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cosmos_base_tendermint_v1_beta1_get_latest_block_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cosmos_base_tendermint_v1_beta1_get_latest_block_with_http_info(**kwargs)  # noqa: E501
            return data

    def cosmos_base_tendermint_v1_beta1_get_latest_block_with_http_info(self, **kwargs):  # noqa: E501
        """GetLatestBlock returns the latest block.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_base_tendermint_v1_beta1_get_latest_block_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20024
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cosmos_base_tendermint_v1_beta1_get_latest_block" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cosmos/base/tendermint/v1beta1/blocks/latest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20024',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cosmos_base_tendermint_v1_beta1_get_latest_validator_set(self, **kwargs):  # noqa: E501
        """GetLatestValidatorSet queries latest validator-set.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_base_tendermint_v1_beta1_get_latest_validator_set(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pagination_key: key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
        :param str pagination_offset: offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
        :param str pagination_limit: limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
        :param bool pagination_count_total: count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
        :param bool pagination_reverse: reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cosmos_base_tendermint_v1_beta1_get_latest_validator_set_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cosmos_base_tendermint_v1_beta1_get_latest_validator_set_with_http_info(**kwargs)  # noqa: E501
            return data

    def cosmos_base_tendermint_v1_beta1_get_latest_validator_set_with_http_info(self, **kwargs):  # noqa: E501
        """GetLatestValidatorSet queries latest validator-set.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_base_tendermint_v1_beta1_get_latest_validator_set_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str pagination_key: key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
        :param str pagination_offset: offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
        :param str pagination_limit: limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
        :param bool pagination_count_total: count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
        :param bool pagination_reverse: reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pagination_key', 'pagination_offset', 'pagination_limit', 'pagination_count_total', 'pagination_reverse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cosmos_base_tendermint_v1_beta1_get_latest_validator_set" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pagination_key' in params:
            query_params.append(('pagination.key', params['pagination_key']))  # noqa: E501
        if 'pagination_offset' in params:
            query_params.append(('pagination.offset', params['pagination_offset']))  # noqa: E501
        if 'pagination_limit' in params:
            query_params.append(('pagination.limit', params['pagination_limit']))  # noqa: E501
        if 'pagination_count_total' in params:
            query_params.append(('pagination.count_total', params['pagination_count_total']))  # noqa: E501
        if 'pagination_reverse' in params:
            query_params.append(('pagination.reverse', params['pagination_reverse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cosmos/base/tendermint/v1beta1/validatorsets/latest', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cosmos_base_tendermint_v1_beta1_get_node_info(self, **kwargs):  # noqa: E501
        """GetNodeInfo queries the current node info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_base_tendermint_v1_beta1_get_node_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cosmos_base_tendermint_v1_beta1_get_node_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cosmos_base_tendermint_v1_beta1_get_node_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def cosmos_base_tendermint_v1_beta1_get_node_info_with_http_info(self, **kwargs):  # noqa: E501
        """GetNodeInfo queries the current node info.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_base_tendermint_v1_beta1_get_node_info_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cosmos_base_tendermint_v1_beta1_get_node_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cosmos/base/tendermint/v1beta1/node_info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cosmos_base_tendermint_v1_beta1_get_syncing(self, **kwargs):  # noqa: E501
        """GetSyncing queries node syncing.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_base_tendermint_v1_beta1_get_syncing(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cosmos_base_tendermint_v1_beta1_get_syncing_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cosmos_base_tendermint_v1_beta1_get_syncing_with_http_info(**kwargs)  # noqa: E501
            return data

    def cosmos_base_tendermint_v1_beta1_get_syncing_with_http_info(self, **kwargs):  # noqa: E501
        """GetSyncing queries node syncing.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_base_tendermint_v1_beta1_get_syncing_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cosmos_base_tendermint_v1_beta1_get_syncing" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cosmos/base/tendermint/v1beta1/syncing', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cosmos_base_tendermint_v1_beta1_get_validator_set_by_height(self, height, **kwargs):  # noqa: E501
        """GetValidatorSetByHeight queries validator-set at a given height.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_base_tendermint_v1_beta1_get_validator_set_by_height(height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str height: (required)
        :param str pagination_key: key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
        :param str pagination_offset: offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
        :param str pagination_limit: limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
        :param bool pagination_count_total: count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
        :param bool pagination_reverse: reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cosmos_base_tendermint_v1_beta1_get_validator_set_by_height_with_http_info(height, **kwargs)  # noqa: E501
        else:
            (data) = self.cosmos_base_tendermint_v1_beta1_get_validator_set_by_height_with_http_info(height, **kwargs)  # noqa: E501
            return data

    def cosmos_base_tendermint_v1_beta1_get_validator_set_by_height_with_http_info(self, height, **kwargs):  # noqa: E501
        """GetValidatorSetByHeight queries validator-set at a given height.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_base_tendermint_v1_beta1_get_validator_set_by_height_with_http_info(height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str height: (required)
        :param str pagination_key: key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
        :param str pagination_offset: offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
        :param str pagination_limit: limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
        :param bool pagination_count_total: count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
        :param bool pagination_reverse: reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['height', 'pagination_key', 'pagination_offset', 'pagination_limit', 'pagination_count_total', 'pagination_reverse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cosmos_base_tendermint_v1_beta1_get_validator_set_by_height" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `cosmos_base_tendermint_v1_beta1_get_validator_set_by_height`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'height' in params:
            path_params['height'] = params['height']  # noqa: E501

        query_params = []
        if 'pagination_key' in params:
            query_params.append(('pagination.key', params['pagination_key']))  # noqa: E501
        if 'pagination_offset' in params:
            query_params.append(('pagination.offset', params['pagination_offset']))  # noqa: E501
        if 'pagination_limit' in params:
            query_params.append(('pagination.limit', params['pagination_limit']))  # noqa: E501
        if 'pagination_count_total' in params:
            query_params.append(('pagination.count_total', params['pagination_count_total']))  # noqa: E501
        if 'pagination_reverse' in params:
            query_params.append(('pagination.reverse', params['pagination_reverse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cosmos/base/tendermint/v1beta1/validatorsets/{height}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20029',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cosmos_tx_v1_beta1_broadcast_tx(self, body, **kwargs):  # noqa: E501
        """BroadcastTx broadcast transaction.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_broadcast_tx(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1beta1TxsBody body: BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
RPC method. (required)
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cosmos_tx_v1_beta1_broadcast_tx_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cosmos_tx_v1_beta1_broadcast_tx_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cosmos_tx_v1_beta1_broadcast_tx_with_http_info(self, body, **kwargs):  # noqa: E501
        """BroadcastTx broadcast transaction.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_broadcast_tx_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1beta1TxsBody body: BroadcastTxRequest is the request type for the Service.BroadcastTxRequest
RPC method. (required)
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cosmos_tx_v1_beta1_broadcast_tx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cosmos_tx_v1_beta1_broadcast_tx`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cosmos/tx/v1beta1/txs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20083',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cosmos_tx_v1_beta1_get_block_with_txs(self, height, **kwargs):  # noqa: E501
        """GetBlockWithTxs fetches a block with decoded txs.  # noqa: E501

        Since: cosmos-sdk 0.45.2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_get_block_with_txs(height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str height: height is the height of the block to query. (required)
        :param str pagination_key: key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
        :param str pagination_offset: offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
        :param str pagination_limit: limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
        :param bool pagination_count_total: count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
        :param bool pagination_reverse: reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
        :return: CosmosTxV1beta1GetBlockWithTxsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cosmos_tx_v1_beta1_get_block_with_txs_with_http_info(height, **kwargs)  # noqa: E501
        else:
            (data) = self.cosmos_tx_v1_beta1_get_block_with_txs_with_http_info(height, **kwargs)  # noqa: E501
            return data

    def cosmos_tx_v1_beta1_get_block_with_txs_with_http_info(self, height, **kwargs):  # noqa: E501
        """GetBlockWithTxs fetches a block with decoded txs.  # noqa: E501

        Since: cosmos-sdk 0.45.2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_get_block_with_txs_with_http_info(height, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str height: height is the height of the block to query. (required)
        :param str pagination_key: key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
        :param str pagination_offset: offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
        :param str pagination_limit: limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
        :param bool pagination_count_total: count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
        :param bool pagination_reverse: reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
        :return: CosmosTxV1beta1GetBlockWithTxsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['height', 'pagination_key', 'pagination_offset', 'pagination_limit', 'pagination_count_total', 'pagination_reverse']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cosmos_tx_v1_beta1_get_block_with_txs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'height' is set
        if ('height' not in params or
                params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `cosmos_tx_v1_beta1_get_block_with_txs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'height' in params:
            path_params['height'] = params['height']  # noqa: E501

        query_params = []
        if 'pagination_key' in params:
            query_params.append(('pagination.key', params['pagination_key']))  # noqa: E501
        if 'pagination_offset' in params:
            query_params.append(('pagination.offset', params['pagination_offset']))  # noqa: E501
        if 'pagination_limit' in params:
            query_params.append(('pagination.limit', params['pagination_limit']))  # noqa: E501
        if 'pagination_count_total' in params:
            query_params.append(('pagination.count_total', params['pagination_count_total']))  # noqa: E501
        if 'pagination_reverse' in params:
            query_params.append(('pagination.reverse', params['pagination_reverse']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cosmos/tx/v1beta1/txs/block/{height}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CosmosTxV1beta1GetBlockWithTxsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cosmos_tx_v1_beta1_get_tx(self, hash, **kwargs):  # noqa: E501
        """GetTx fetches a tx by hash.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_get_tx(hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hash: hash is the tx hash to query, encoded as a hex string. (required)
        :return: CosmosTxV1beta1GetTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cosmos_tx_v1_beta1_get_tx_with_http_info(hash, **kwargs)  # noqa: E501
        else:
            (data) = self.cosmos_tx_v1_beta1_get_tx_with_http_info(hash, **kwargs)  # noqa: E501
            return data

    def cosmos_tx_v1_beta1_get_tx_with_http_info(self, hash, **kwargs):  # noqa: E501
        """GetTx fetches a tx by hash.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_get_tx_with_http_info(hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str hash: hash is the tx hash to query, encoded as a hex string. (required)
        :return: CosmosTxV1beta1GetTxResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cosmos_tx_v1_beta1_get_tx" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'hash' is set
        if ('hash' not in params or
                params['hash'] is None):
            raise ValueError("Missing the required parameter `hash` when calling `cosmos_tx_v1_beta1_get_tx`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'hash' in params:
            path_params['hash'] = params['hash']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cosmos/tx/v1beta1/txs/{hash}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CosmosTxV1beta1GetTxResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cosmos_tx_v1_beta1_get_txs_event(self, **kwargs):  # noqa: E501
        """GetTxsEvent fetches txs by event.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_get_txs_event(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] events: events is the list of transaction event type.
        :param str pagination_key: key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
        :param str pagination_offset: offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
        :param str pagination_limit: limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
        :param bool pagination_count_total: count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
        :param bool pagination_reverse: reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
        :param str order_by:  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
        :param str page: page is the page number to query, starts at 1. If not provided, will default to first page.
        :param str limit: limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
        :return: CosmosTxV1beta1GetTxsEventResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cosmos_tx_v1_beta1_get_txs_event_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cosmos_tx_v1_beta1_get_txs_event_with_http_info(**kwargs)  # noqa: E501
            return data

    def cosmos_tx_v1_beta1_get_txs_event_with_http_info(self, **kwargs):  # noqa: E501
        """GetTxsEvent fetches txs by event.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_get_txs_event_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] events: events is the list of transaction event type.
        :param str pagination_key: key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
        :param str pagination_offset: offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
        :param str pagination_limit: limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
        :param bool pagination_count_total: count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
        :param bool pagination_reverse: reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
        :param str order_by:  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
        :param str page: page is the page number to query, starts at 1. If not provided, will default to first page.
        :param str limit: limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
        :return: CosmosTxV1beta1GetTxsEventResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['events', 'pagination_key', 'pagination_offset', 'pagination_limit', 'pagination_count_total', 'pagination_reverse', 'order_by', 'page', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cosmos_tx_v1_beta1_get_txs_event" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'events' in params:
            query_params.append(('events', params['events']))  # noqa: E501
            collection_formats['events'] = 'multi'  # noqa: E501
        if 'pagination_key' in params:
            query_params.append(('pagination.key', params['pagination_key']))  # noqa: E501
        if 'pagination_offset' in params:
            query_params.append(('pagination.offset', params['pagination_offset']))  # noqa: E501
        if 'pagination_limit' in params:
            query_params.append(('pagination.limit', params['pagination_limit']))  # noqa: E501
        if 'pagination_count_total' in params:
            query_params.append(('pagination.count_total', params['pagination_count_total']))  # noqa: E501
        if 'pagination_reverse' in params:
            query_params.append(('pagination.reverse', params['pagination_reverse']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cosmos/tx/v1beta1/txs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CosmosTxV1beta1GetTxsEventResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cosmos_tx_v1_beta1_simulate(self, body, **kwargs):  # noqa: E501
        """Simulate simulates executing a transaction for estimating gas usage.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_simulate(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CosmosTxV1beta1SimulateRequest body: SimulateRequest is the request type for the Service.Simulate
RPC method. (required)
        :return: InlineResponse20082
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cosmos_tx_v1_beta1_simulate_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cosmos_tx_v1_beta1_simulate_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cosmos_tx_v1_beta1_simulate_with_http_info(self, body, **kwargs):  # noqa: E501
        """Simulate simulates executing a transaction for estimating gas usage.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_simulate_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CosmosTxV1beta1SimulateRequest body: SimulateRequest is the request type for the Service.Simulate
RPC method. (required)
        :return: InlineResponse20082
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cosmos_tx_v1_beta1_simulate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cosmos_tx_v1_beta1_simulate`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cosmos/tx/v1beta1/simulate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20082',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cosmos_tx_v1_beta1_tx_decode(self, body, **kwargs):  # noqa: E501
        """TxDecode decodes the transaction.  # noqa: E501

        Since: cosmos-sdk 0.47  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_tx_decode(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1beta1DecodeBody body: TxDecodeRequest is the request type for the Service.TxDecode
RPC method.

Since: cosmos-sdk 0.47 (required)
        :return: CosmosTxV1beta1TxDecodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cosmos_tx_v1_beta1_tx_decode_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cosmos_tx_v1_beta1_tx_decode_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cosmos_tx_v1_beta1_tx_decode_with_http_info(self, body, **kwargs):  # noqa: E501
        """TxDecode decodes the transaction.  # noqa: E501

        Since: cosmos-sdk 0.47  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_tx_decode_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1beta1DecodeBody body: TxDecodeRequest is the request type for the Service.TxDecode
RPC method.

Since: cosmos-sdk 0.47 (required)
        :return: CosmosTxV1beta1TxDecodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cosmos_tx_v1_beta1_tx_decode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cosmos_tx_v1_beta1_tx_decode`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cosmos/tx/v1beta1/decode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CosmosTxV1beta1TxDecodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cosmos_tx_v1_beta1_tx_decode_amino(self, body, **kwargs):  # noqa: E501
        """TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.  # noqa: E501

        Since: cosmos-sdk 0.47  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_tx_decode_amino(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DecodeAminoBody body: TxDecodeAminoRequest is the request type for the Service.TxDecodeAmino
RPC method.

Since: cosmos-sdk 0.47 (required)
        :return: InlineResponse20079
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cosmos_tx_v1_beta1_tx_decode_amino_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cosmos_tx_v1_beta1_tx_decode_amino_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cosmos_tx_v1_beta1_tx_decode_amino_with_http_info(self, body, **kwargs):  # noqa: E501
        """TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.  # noqa: E501

        Since: cosmos-sdk 0.47  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_tx_decode_amino_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DecodeAminoBody body: TxDecodeAminoRequest is the request type for the Service.TxDecodeAmino
RPC method.

Since: cosmos-sdk 0.47 (required)
        :return: InlineResponse20079
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cosmos_tx_v1_beta1_tx_decode_amino" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cosmos_tx_v1_beta1_tx_decode_amino`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cosmos/tx/v1beta1/decode/amino', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20079',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cosmos_tx_v1_beta1_tx_encode(self, body, **kwargs):  # noqa: E501
        """TxEncode encodes the transaction.  # noqa: E501

        Since: cosmos-sdk 0.47  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_tx_encode(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CosmosTxV1beta1TxEncodeRequest body: TxEncodeRequest is the request type for the Service.TxEncode
RPC method.

Since: cosmos-sdk 0.47 (required)
        :return: InlineResponse20080
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cosmos_tx_v1_beta1_tx_encode_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cosmos_tx_v1_beta1_tx_encode_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cosmos_tx_v1_beta1_tx_encode_with_http_info(self, body, **kwargs):  # noqa: E501
        """TxEncode encodes the transaction.  # noqa: E501

        Since: cosmos-sdk 0.47  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_tx_encode_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CosmosTxV1beta1TxEncodeRequest body: TxEncodeRequest is the request type for the Service.TxEncode
RPC method.

Since: cosmos-sdk 0.47 (required)
        :return: InlineResponse20080
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cosmos_tx_v1_beta1_tx_encode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cosmos_tx_v1_beta1_tx_encode`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cosmos/tx/v1beta1/encode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20080',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cosmos_tx_v1_beta1_tx_encode_amino(self, body, **kwargs):  # noqa: E501
        """TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.  # noqa: E501

        Since: cosmos-sdk 0.47  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_tx_encode_amino(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EncodeAminoBody body: TxEncodeAminoRequest is the request type for the Service.TxEncodeAmino
RPC method.

Since: cosmos-sdk 0.47 (required)
        :return: InlineResponse20081
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cosmos_tx_v1_beta1_tx_encode_amino_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cosmos_tx_v1_beta1_tx_encode_amino_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cosmos_tx_v1_beta1_tx_encode_amino_with_http_info(self, body, **kwargs):  # noqa: E501
        """TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.  # noqa: E501

        Since: cosmos-sdk 0.47  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cosmos_tx_v1_beta1_tx_encode_amino_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EncodeAminoBody body: TxEncodeAminoRequest is the request type for the Service.TxEncodeAmino
RPC method.

Since: cosmos-sdk 0.47 (required)
        :return: InlineResponse20081
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cosmos_tx_v1_beta1_tx_encode_amino" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `cosmos_tx_v1_beta1_tx_encode_amino`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cosmos/tx/v1beta1/encode/amino', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20081',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
