# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CosmosStakingV1beta1Delegation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delegator_address': 'str',
        'validator_address': 'str',
        'shares': 'str',
        'start_height': 'str',
        'amount': 'str',
        'unmovable': 'str',
        'un_kyc_amount': 'str'
    }

    attribute_map = {
        'delegator_address': 'delegator_address',
        'validator_address': 'validator_address',
        'shares': 'shares',
        'start_height': 'startHeight',
        'amount': 'amount',
        'unmovable': 'unmovable',
        'un_kyc_amount': 'unKycAmount'
    }

    def __init__(self, delegator_address=None, validator_address=None, shares=None, start_height=None, amount=None, unmovable=None, un_kyc_amount=None):  # noqa: E501
        """CosmosStakingV1beta1Delegation - a model defined in Swagger"""  # noqa: E501
        self._delegator_address = None
        self._validator_address = None
        self._shares = None
        self._start_height = None
        self._amount = None
        self._unmovable = None
        self._un_kyc_amount = None
        self.discriminator = None
        if delegator_address is not None:
            self.delegator_address = delegator_address
        if validator_address is not None:
            self.validator_address = validator_address
        if shares is not None:
            self.shares = shares
        if start_height is not None:
            self.start_height = start_height
        if amount is not None:
            self.amount = amount
        if unmovable is not None:
            self.unmovable = unmovable
        if un_kyc_amount is not None:
            self.un_kyc_amount = un_kyc_amount

    @property
    def delegator_address(self):
        """Gets the delegator_address of this CosmosStakingV1beta1Delegation.  # noqa: E501

        delegator_address is the bech32-encoded address of the delegator.  # noqa: E501

        :return: The delegator_address of this CosmosStakingV1beta1Delegation.  # noqa: E501
        :rtype: str
        """
        return self._delegator_address

    @delegator_address.setter
    def delegator_address(self, delegator_address):
        """Sets the delegator_address of this CosmosStakingV1beta1Delegation.

        delegator_address is the bech32-encoded address of the delegator.  # noqa: E501

        :param delegator_address: The delegator_address of this CosmosStakingV1beta1Delegation.  # noqa: E501
        :type: str
        """

        self._delegator_address = delegator_address

    @property
    def validator_address(self):
        """Gets the validator_address of this CosmosStakingV1beta1Delegation.  # noqa: E501

        validator_address is the bech32-encoded address of the validator.  # noqa: E501

        :return: The validator_address of this CosmosStakingV1beta1Delegation.  # noqa: E501
        :rtype: str
        """
        return self._validator_address

    @validator_address.setter
    def validator_address(self, validator_address):
        """Sets the validator_address of this CosmosStakingV1beta1Delegation.

        validator_address is the bech32-encoded address of the validator.  # noqa: E501

        :param validator_address: The validator_address of this CosmosStakingV1beta1Delegation.  # noqa: E501
        :type: str
        """

        self._validator_address = validator_address

    @property
    def shares(self):
        """Gets the shares of this CosmosStakingV1beta1Delegation.  # noqa: E501

        shares define the delegation shares received.  # noqa: E501

        :return: The shares of this CosmosStakingV1beta1Delegation.  # noqa: E501
        :rtype: str
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this CosmosStakingV1beta1Delegation.

        shares define the delegation shares received.  # noqa: E501

        :param shares: The shares of this CosmosStakingV1beta1Delegation.  # noqa: E501
        :type: str
        """

        self._shares = shares

    @property
    def start_height(self):
        """Gets the start_height of this CosmosStakingV1beta1Delegation.  # noqa: E501


        :return: The start_height of this CosmosStakingV1beta1Delegation.  # noqa: E501
        :rtype: str
        """
        return self._start_height

    @start_height.setter
    def start_height(self, start_height):
        """Sets the start_height of this CosmosStakingV1beta1Delegation.


        :param start_height: The start_height of this CosmosStakingV1beta1Delegation.  # noqa: E501
        :type: str
        """

        self._start_height = start_height

    @property
    def amount(self):
        """Gets the amount of this CosmosStakingV1beta1Delegation.  # noqa: E501


        :return: The amount of this CosmosStakingV1beta1Delegation.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CosmosStakingV1beta1Delegation.


        :param amount: The amount of this CosmosStakingV1beta1Delegation.  # noqa: E501
        :type: str
        """

        self._amount = amount

    @property
    def unmovable(self):
        """Gets the unmovable of this CosmosStakingV1beta1Delegation.  # noqa: E501


        :return: The unmovable of this CosmosStakingV1beta1Delegation.  # noqa: E501
        :rtype: str
        """
        return self._unmovable

    @unmovable.setter
    def unmovable(self, unmovable):
        """Sets the unmovable of this CosmosStakingV1beta1Delegation.


        :param unmovable: The unmovable of this CosmosStakingV1beta1Delegation.  # noqa: E501
        :type: str
        """

        self._unmovable = unmovable

    @property
    def un_kyc_amount(self):
        """Gets the un_kyc_amount of this CosmosStakingV1beta1Delegation.  # noqa: E501


        :return: The un_kyc_amount of this CosmosStakingV1beta1Delegation.  # noqa: E501
        :rtype: str
        """
        return self._un_kyc_amount

    @un_kyc_amount.setter
    def un_kyc_amount(self, un_kyc_amount):
        """Sets the un_kyc_amount of this CosmosStakingV1beta1Delegation.


        :param un_kyc_amount: The un_kyc_amount of this CosmosStakingV1beta1Delegation.  # noqa: E501
        :type: str
        """

        self._un_kyc_amount = un_kyc_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CosmosStakingV1beta1Delegation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CosmosStakingV1beta1Delegation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
