# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CosmosSlashingV1beta1QuerySigningInfosResponseInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'start_height': 'str',
        'index_offset': 'str',
        'jailed_until': 'datetime',
        'tombstoned': 'bool',
        'missed_blocks_counter': 'str'
    }

    attribute_map = {
        'address': 'address',
        'start_height': 'start_height',
        'index_offset': 'index_offset',
        'jailed_until': 'jailed_until',
        'tombstoned': 'tombstoned',
        'missed_blocks_counter': 'missed_blocks_counter'
    }

    def __init__(self, address=None, start_height=None, index_offset=None, jailed_until=None, tombstoned=None, missed_blocks_counter=None):  # noqa: E501
        """CosmosSlashingV1beta1QuerySigningInfosResponseInfo - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._start_height = None
        self._index_offset = None
        self._jailed_until = None
        self._tombstoned = None
        self._missed_blocks_counter = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if start_height is not None:
            self.start_height = start_height
        if index_offset is not None:
            self.index_offset = index_offset
        if jailed_until is not None:
            self.jailed_until = jailed_until
        if tombstoned is not None:
            self.tombstoned = tombstoned
        if missed_blocks_counter is not None:
            self.missed_blocks_counter = missed_blocks_counter

    @property
    def address(self):
        """Gets the address of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501


        :return: The address of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.


        :param address: The address of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def start_height(self):
        """Gets the start_height of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501


        :return: The start_height of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501
        :rtype: str
        """
        return self._start_height

    @start_height.setter
    def start_height(self, start_height):
        """Sets the start_height of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.


        :param start_height: The start_height of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501
        :type: str
        """

        self._start_height = start_height

    @property
    def index_offset(self):
        """Gets the index_offset of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501

        Index which is incremented each time the validator was a bonded in a block and may have signed a precommit or not. This in conjunction with the `SignedBlocksWindow` param determines the index in the `MissedBlocksBitArray`.  # noqa: E501

        :return: The index_offset of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501
        :rtype: str
        """
        return self._index_offset

    @index_offset.setter
    def index_offset(self, index_offset):
        """Sets the index_offset of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.

        Index which is incremented each time the validator was a bonded in a block and may have signed a precommit or not. This in conjunction with the `SignedBlocksWindow` param determines the index in the `MissedBlocksBitArray`.  # noqa: E501

        :param index_offset: The index_offset of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501
        :type: str
        """

        self._index_offset = index_offset

    @property
    def jailed_until(self):
        """Gets the jailed_until of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501

        Timestamp until which the validator is jailed due to liveness downtime.  # noqa: E501

        :return: The jailed_until of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._jailed_until

    @jailed_until.setter
    def jailed_until(self, jailed_until):
        """Sets the jailed_until of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.

        Timestamp until which the validator is jailed due to liveness downtime.  # noqa: E501

        :param jailed_until: The jailed_until of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501
        :type: datetime
        """

        self._jailed_until = jailed_until

    @property
    def tombstoned(self):
        """Gets the tombstoned of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501

        Whether or not a validator has been tombstoned (killed out of validator set). It is set once the validator commits an equivocation or for any other configured misbehiavor.  # noqa: E501

        :return: The tombstoned of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501
        :rtype: bool
        """
        return self._tombstoned

    @tombstoned.setter
    def tombstoned(self, tombstoned):
        """Sets the tombstoned of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.

        Whether or not a validator has been tombstoned (killed out of validator set). It is set once the validator commits an equivocation or for any other configured misbehiavor.  # noqa: E501

        :param tombstoned: The tombstoned of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501
        :type: bool
        """

        self._tombstoned = tombstoned

    @property
    def missed_blocks_counter(self):
        """Gets the missed_blocks_counter of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501

        A counter kept to avoid unnecessary array reads. Note that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`.  # noqa: E501

        :return: The missed_blocks_counter of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501
        :rtype: str
        """
        return self._missed_blocks_counter

    @missed_blocks_counter.setter
    def missed_blocks_counter(self, missed_blocks_counter):
        """Sets the missed_blocks_counter of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.

        A counter kept to avoid unnecessary array reads. Note that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`.  # noqa: E501

        :param missed_blocks_counter: The missed_blocks_counter of this CosmosSlashingV1beta1QuerySigningInfosResponseInfo.  # noqa: E501
        :type: str
        """

        self._missed_blocks_counter = missed_blocks_counter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CosmosSlashingV1beta1QuerySigningInfosResponseInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CosmosSlashingV1beta1QuerySigningInfosResponseInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
