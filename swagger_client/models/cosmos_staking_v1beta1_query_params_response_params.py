# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CosmosStakingV1beta1QueryParamsResponseParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unbonding_time': 'str',
        'max_validators': 'int',
        'max_entries': 'int',
        'historical_entries': 'int',
        'bond_denom': 'str',
        'min_commission_rate': 'str'
    }

    attribute_map = {
        'unbonding_time': 'unbonding_time',
        'max_validators': 'max_validators',
        'max_entries': 'max_entries',
        'historical_entries': 'historical_entries',
        'bond_denom': 'bond_denom',
        'min_commission_rate': 'min_commission_rate'
    }

    def __init__(self, unbonding_time=None, max_validators=None, max_entries=None, historical_entries=None, bond_denom=None, min_commission_rate=None):  # noqa: E501
        """CosmosStakingV1beta1QueryParamsResponseParams - a model defined in Swagger"""  # noqa: E501
        self._unbonding_time = None
        self._max_validators = None
        self._max_entries = None
        self._historical_entries = None
        self._bond_denom = None
        self._min_commission_rate = None
        self.discriminator = None
        if unbonding_time is not None:
            self.unbonding_time = unbonding_time
        if max_validators is not None:
            self.max_validators = max_validators
        if max_entries is not None:
            self.max_entries = max_entries
        if historical_entries is not None:
            self.historical_entries = historical_entries
        if bond_denom is not None:
            self.bond_denom = bond_denom
        if min_commission_rate is not None:
            self.min_commission_rate = min_commission_rate

    @property
    def unbonding_time(self):
        """Gets the unbonding_time of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501

        unbonding_time is the time duration of unbonding.  # noqa: E501

        :return: The unbonding_time of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501
        :rtype: str
        """
        return self._unbonding_time

    @unbonding_time.setter
    def unbonding_time(self, unbonding_time):
        """Sets the unbonding_time of this CosmosStakingV1beta1QueryParamsResponseParams.

        unbonding_time is the time duration of unbonding.  # noqa: E501

        :param unbonding_time: The unbonding_time of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501
        :type: str
        """

        self._unbonding_time = unbonding_time

    @property
    def max_validators(self):
        """Gets the max_validators of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501

        max_validators is the maximum number of validators.  # noqa: E501

        :return: The max_validators of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501
        :rtype: int
        """
        return self._max_validators

    @max_validators.setter
    def max_validators(self, max_validators):
        """Sets the max_validators of this CosmosStakingV1beta1QueryParamsResponseParams.

        max_validators is the maximum number of validators.  # noqa: E501

        :param max_validators: The max_validators of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501
        :type: int
        """

        self._max_validators = max_validators

    @property
    def max_entries(self):
        """Gets the max_entries of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501

        max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).  # noqa: E501

        :return: The max_entries of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501
        :rtype: int
        """
        return self._max_entries

    @max_entries.setter
    def max_entries(self, max_entries):
        """Sets the max_entries of this CosmosStakingV1beta1QueryParamsResponseParams.

        max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).  # noqa: E501

        :param max_entries: The max_entries of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501
        :type: int
        """

        self._max_entries = max_entries

    @property
    def historical_entries(self):
        """Gets the historical_entries of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501

        historical_entries is the number of historical entries to persist.  # noqa: E501

        :return: The historical_entries of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501
        :rtype: int
        """
        return self._historical_entries

    @historical_entries.setter
    def historical_entries(self, historical_entries):
        """Sets the historical_entries of this CosmosStakingV1beta1QueryParamsResponseParams.

        historical_entries is the number of historical entries to persist.  # noqa: E501

        :param historical_entries: The historical_entries of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501
        :type: int
        """

        self._historical_entries = historical_entries

    @property
    def bond_denom(self):
        """Gets the bond_denom of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501

        bond_denom defines the bondable coin denomination.  # noqa: E501

        :return: The bond_denom of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501
        :rtype: str
        """
        return self._bond_denom

    @bond_denom.setter
    def bond_denom(self, bond_denom):
        """Sets the bond_denom of this CosmosStakingV1beta1QueryParamsResponseParams.

        bond_denom defines the bondable coin denomination.  # noqa: E501

        :param bond_denom: The bond_denom of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501
        :type: str
        """

        self._bond_denom = bond_denom

    @property
    def min_commission_rate(self):
        """Gets the min_commission_rate of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501


        :return: The min_commission_rate of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501
        :rtype: str
        """
        return self._min_commission_rate

    @min_commission_rate.setter
    def min_commission_rate(self, min_commission_rate):
        """Sets the min_commission_rate of this CosmosStakingV1beta1QueryParamsResponseParams.


        :param min_commission_rate: The min_commission_rate of this CosmosStakingV1beta1QueryParamsResponseParams.  # noqa: E501
        :type: str
        """

        self._min_commission_rate = min_commission_rate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CosmosStakingV1beta1QueryParamsResponseParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CosmosStakingV1beta1QueryParamsResponseParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
