# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BodyIsTheProcessableContentOfTheTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'messages': 'list[dict(str, object)]',
        'memo': 'str',
        'timeout_height': 'str',
        'extension_options': 'list[dict(str, object)]',
        'non_critical_extension_options': 'list[dict(str, object)]'
    }

    attribute_map = {
        'messages': 'messages',
        'memo': 'memo',
        'timeout_height': 'timeout_height',
        'extension_options': 'extension_options',
        'non_critical_extension_options': 'non_critical_extension_options'
    }

    def __init__(self, messages=None, memo=None, timeout_height=None, extension_options=None, non_critical_extension_options=None):  # noqa: E501
        """BodyIsTheProcessableContentOfTheTransaction - a model defined in Swagger"""  # noqa: E501
        self._messages = None
        self._memo = None
        self._timeout_height = None
        self._extension_options = None
        self._non_critical_extension_options = None
        self.discriminator = None
        if messages is not None:
            self.messages = messages
        if memo is not None:
            self.memo = memo
        if timeout_height is not None:
            self.timeout_height = timeout_height
        if extension_options is not None:
            self.extension_options = extension_options
        if non_critical_extension_options is not None:
            self.non_critical_extension_options = non_critical_extension_options

    @property
    def messages(self):
        """Gets the messages of this BodyIsTheProcessableContentOfTheTransaction.  # noqa: E501

        messages is a list of messages to be executed. The required signers of those messages define the number and order of elements in AuthInfo's signer_infos and Tx's signatures. Each required signer address is added to the list only the first time it occurs. By convention, the first required signer (usually from the first message) is referred to as the primary signer and pays the fee for the whole transaction.  # noqa: E501

        :return: The messages of this BodyIsTheProcessableContentOfTheTransaction.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this BodyIsTheProcessableContentOfTheTransaction.

        messages is a list of messages to be executed. The required signers of those messages define the number and order of elements in AuthInfo's signer_infos and Tx's signatures. Each required signer address is added to the list only the first time it occurs. By convention, the first required signer (usually from the first message) is referred to as the primary signer and pays the fee for the whole transaction.  # noqa: E501

        :param messages: The messages of this BodyIsTheProcessableContentOfTheTransaction.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._messages = messages

    @property
    def memo(self):
        """Gets the memo of this BodyIsTheProcessableContentOfTheTransaction.  # noqa: E501

        memo is any arbitrary note/comment to be added to the transaction. WARNING: in clients, any publicly exposed text should not be called memo, but should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122).  # noqa: E501

        :return: The memo of this BodyIsTheProcessableContentOfTheTransaction.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this BodyIsTheProcessableContentOfTheTransaction.

        memo is any arbitrary note/comment to be added to the transaction. WARNING: in clients, any publicly exposed text should not be called memo, but should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122).  # noqa: E501

        :param memo: The memo of this BodyIsTheProcessableContentOfTheTransaction.  # noqa: E501
        :type: str
        """

        self._memo = memo

    @property
    def timeout_height(self):
        """Gets the timeout_height of this BodyIsTheProcessableContentOfTheTransaction.  # noqa: E501


        :return: The timeout_height of this BodyIsTheProcessableContentOfTheTransaction.  # noqa: E501
        :rtype: str
        """
        return self._timeout_height

    @timeout_height.setter
    def timeout_height(self, timeout_height):
        """Sets the timeout_height of this BodyIsTheProcessableContentOfTheTransaction.


        :param timeout_height: The timeout_height of this BodyIsTheProcessableContentOfTheTransaction.  # noqa: E501
        :type: str
        """

        self._timeout_height = timeout_height

    @property
    def extension_options(self):
        """Gets the extension_options of this BodyIsTheProcessableContentOfTheTransaction.  # noqa: E501


        :return: The extension_options of this BodyIsTheProcessableContentOfTheTransaction.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._extension_options

    @extension_options.setter
    def extension_options(self, extension_options):
        """Sets the extension_options of this BodyIsTheProcessableContentOfTheTransaction.


        :param extension_options: The extension_options of this BodyIsTheProcessableContentOfTheTransaction.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._extension_options = extension_options

    @property
    def non_critical_extension_options(self):
        """Gets the non_critical_extension_options of this BodyIsTheProcessableContentOfTheTransaction.  # noqa: E501


        :return: The non_critical_extension_options of this BodyIsTheProcessableContentOfTheTransaction.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._non_critical_extension_options

    @non_critical_extension_options.setter
    def non_critical_extension_options(self, non_critical_extension_options):
        """Sets the non_critical_extension_options of this BodyIsTheProcessableContentOfTheTransaction.


        :param non_critical_extension_options: The non_critical_extension_options of this BodyIsTheProcessableContentOfTheTransaction.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._non_critical_extension_options = non_critical_extension_options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BodyIsTheProcessableContentOfTheTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BodyIsTheProcessableContentOfTheTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
