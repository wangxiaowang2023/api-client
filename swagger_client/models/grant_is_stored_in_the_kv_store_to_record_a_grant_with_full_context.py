# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'granter': 'str',
        'grantee': 'str',
        'allowance': 'dict(str, object)'
    }

    attribute_map = {
        'granter': 'granter',
        'grantee': 'grantee',
        'allowance': 'allowance'
    }

    def __init__(self, granter=None, grantee=None, allowance=None):  # noqa: E501
        """GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext - a model defined in Swagger"""  # noqa: E501
        self._granter = None
        self._grantee = None
        self._allowance = None
        self.discriminator = None
        if granter is not None:
            self.granter = granter
        if grantee is not None:
            self.grantee = grantee
        if allowance is not None:
            self.allowance = allowance

    @property
    def granter(self):
        """Gets the granter of this GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext.  # noqa: E501

        granter is the address of the user granting an allowance of their funds.  # noqa: E501

        :return: The granter of this GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext.  # noqa: E501
        :rtype: str
        """
        return self._granter

    @granter.setter
    def granter(self, granter):
        """Sets the granter of this GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext.

        granter is the address of the user granting an allowance of their funds.  # noqa: E501

        :param granter: The granter of this GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext.  # noqa: E501
        :type: str
        """

        self._granter = granter

    @property
    def grantee(self):
        """Gets the grantee of this GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext.  # noqa: E501

        grantee is the address of the user being granted an allowance of another user's funds.  # noqa: E501

        :return: The grantee of this GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext.  # noqa: E501
        :rtype: str
        """
        return self._grantee

    @grantee.setter
    def grantee(self, grantee):
        """Sets the grantee of this GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext.

        grantee is the address of the user being granted an allowance of another user's funds.  # noqa: E501

        :param grantee: The grantee of this GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext.  # noqa: E501
        :type: str
        """

        self._grantee = grantee

    @property
    def allowance(self):
        """Gets the allowance of this GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext.  # noqa: E501

        allowance can be any of basic, periodic, allowed fee allowance.  # noqa: E501

        :return: The allowance of this GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._allowance

    @allowance.setter
    def allowance(self, allowance):
        """Sets the allowance of this GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext.

        allowance can be any of basic, periodic, allowed fee allowance.  # noqa: E501

        :param allowance: The allowance of this GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext.  # noqa: E501
        :type: dict(str, object)
        """

        self._allowance = allowance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
