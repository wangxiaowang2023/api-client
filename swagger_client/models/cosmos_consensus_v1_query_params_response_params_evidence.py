# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CosmosConsensusV1QueryParamsResponseParamsEvidence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_age_num_blocks': 'str',
        'max_age_duration': 'str',
        'max_bytes': 'str'
    }

    attribute_map = {
        'max_age_num_blocks': 'max_age_num_blocks',
        'max_age_duration': 'max_age_duration',
        'max_bytes': 'max_bytes'
    }

    def __init__(self, max_age_num_blocks=None, max_age_duration=None, max_bytes=None):  # noqa: E501
        """CosmosConsensusV1QueryParamsResponseParamsEvidence - a model defined in Swagger"""  # noqa: E501
        self._max_age_num_blocks = None
        self._max_age_duration = None
        self._max_bytes = None
        self.discriminator = None
        if max_age_num_blocks is not None:
            self.max_age_num_blocks = max_age_num_blocks
        if max_age_duration is not None:
            self.max_age_duration = max_age_duration
        if max_bytes is not None:
            self.max_bytes = max_bytes

    @property
    def max_age_num_blocks(self):
        """Gets the max_age_num_blocks of this CosmosConsensusV1QueryParamsResponseParamsEvidence.  # noqa: E501

        Max age of evidence, in blocks.  The basic formula for calculating this is: MaxAgeDuration / {average block time}.  # noqa: E501

        :return: The max_age_num_blocks of this CosmosConsensusV1QueryParamsResponseParamsEvidence.  # noqa: E501
        :rtype: str
        """
        return self._max_age_num_blocks

    @max_age_num_blocks.setter
    def max_age_num_blocks(self, max_age_num_blocks):
        """Sets the max_age_num_blocks of this CosmosConsensusV1QueryParamsResponseParamsEvidence.

        Max age of evidence, in blocks.  The basic formula for calculating this is: MaxAgeDuration / {average block time}.  # noqa: E501

        :param max_age_num_blocks: The max_age_num_blocks of this CosmosConsensusV1QueryParamsResponseParamsEvidence.  # noqa: E501
        :type: str
        """

        self._max_age_num_blocks = max_age_num_blocks

    @property
    def max_age_duration(self):
        """Gets the max_age_duration of this CosmosConsensusV1QueryParamsResponseParamsEvidence.  # noqa: E501

        Max age of evidence, in time.  It should correspond with an app's \"unbonding period\" or other similar mechanism for handling [Nothing-At-Stake attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).  # noqa: E501

        :return: The max_age_duration of this CosmosConsensusV1QueryParamsResponseParamsEvidence.  # noqa: E501
        :rtype: str
        """
        return self._max_age_duration

    @max_age_duration.setter
    def max_age_duration(self, max_age_duration):
        """Sets the max_age_duration of this CosmosConsensusV1QueryParamsResponseParamsEvidence.

        Max age of evidence, in time.  It should correspond with an app's \"unbonding period\" or other similar mechanism for handling [Nothing-At-Stake attacks](https://github.com/ethereum/wiki/wiki/Proof-of-Stake-FAQ#what-is-the-nothing-at-stake-problem-and-how-can-it-be-fixed).  # noqa: E501

        :param max_age_duration: The max_age_duration of this CosmosConsensusV1QueryParamsResponseParamsEvidence.  # noqa: E501
        :type: str
        """

        self._max_age_duration = max_age_duration

    @property
    def max_bytes(self):
        """Gets the max_bytes of this CosmosConsensusV1QueryParamsResponseParamsEvidence.  # noqa: E501


        :return: The max_bytes of this CosmosConsensusV1QueryParamsResponseParamsEvidence.  # noqa: E501
        :rtype: str
        """
        return self._max_bytes

    @max_bytes.setter
    def max_bytes(self, max_bytes):
        """Sets the max_bytes of this CosmosConsensusV1QueryParamsResponseParamsEvidence.


        :param max_bytes: The max_bytes of this CosmosConsensusV1QueryParamsResponseParamsEvidence.  # noqa: E501
        :type: str
        """

        self._max_bytes = max_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CosmosConsensusV1QueryParamsResponseParamsEvidence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CosmosConsensusV1QueryParamsResponseParamsEvidence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
