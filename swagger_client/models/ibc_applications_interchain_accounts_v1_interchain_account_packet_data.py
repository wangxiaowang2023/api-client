# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IbcApplicationsInterchainAccountsV1InterchainAccountPacketData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'data': 'str',
        'memo': 'str'
    }

    attribute_map = {
        'type': 'type',
        'data': 'data',
        'memo': 'memo'
    }

    def __init__(self, type='TYPE_UNSPECIFIED', data=None, memo=None):  # noqa: E501
        """IbcApplicationsInterchainAccountsV1InterchainAccountPacketData - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._data = None
        self._memo = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if data is not None:
            self.data = data
        if memo is not None:
            self.memo = memo

    @property
    def type(self):
        """Gets the type of this IbcApplicationsInterchainAccountsV1InterchainAccountPacketData.  # noqa: E501

        - TYPE_UNSPECIFIED: Default zero value enumeration  - TYPE_EXECUTE_TX: Execute a transaction on an interchain accounts host chain  # noqa: E501

        :return: The type of this IbcApplicationsInterchainAccountsV1InterchainAccountPacketData.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IbcApplicationsInterchainAccountsV1InterchainAccountPacketData.

        - TYPE_UNSPECIFIED: Default zero value enumeration  - TYPE_EXECUTE_TX: Execute a transaction on an interchain accounts host chain  # noqa: E501

        :param type: The type of this IbcApplicationsInterchainAccountsV1InterchainAccountPacketData.  # noqa: E501
        :type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "TYPE_EXECUTE_TX"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def data(self):
        """Gets the data of this IbcApplicationsInterchainAccountsV1InterchainAccountPacketData.  # noqa: E501


        :return: The data of this IbcApplicationsInterchainAccountsV1InterchainAccountPacketData.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this IbcApplicationsInterchainAccountsV1InterchainAccountPacketData.


        :param data: The data of this IbcApplicationsInterchainAccountsV1InterchainAccountPacketData.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def memo(self):
        """Gets the memo of this IbcApplicationsInterchainAccountsV1InterchainAccountPacketData.  # noqa: E501


        :return: The memo of this IbcApplicationsInterchainAccountsV1InterchainAccountPacketData.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this IbcApplicationsInterchainAccountsV1InterchainAccountPacketData.


        :param memo: The memo of this IbcApplicationsInterchainAccountsV1InterchainAccountPacketData.  # noqa: E501
        :type: str
        """

        self._memo = memo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IbcApplicationsInterchainAccountsV1InterchainAccountPacketData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IbcApplicationsInterchainAccountsV1InterchainAccountPacketData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
