# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IbcCoreClientV1QueryConsensusStateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consensus_state': 'dict(str, object)',
        'proof': 'str',
        'proof_height': 'HeightAtWhichTheProofWasRetrieved'
    }

    attribute_map = {
        'consensus_state': 'consensus_state',
        'proof': 'proof',
        'proof_height': 'proof_height'
    }

    def __init__(self, consensus_state=None, proof=None, proof_height=None):  # noqa: E501
        """IbcCoreClientV1QueryConsensusStateResponse - a model defined in Swagger"""  # noqa: E501
        self._consensus_state = None
        self._proof = None
        self._proof_height = None
        self.discriminator = None
        if consensus_state is not None:
            self.consensus_state = consensus_state
        if proof is not None:
            self.proof = proof
        if proof_height is not None:
            self.proof_height = proof_height

    @property
    def consensus_state(self):
        """Gets the consensus_state of this IbcCoreClientV1QueryConsensusStateResponse.  # noqa: E501

        `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := anypb.New(foo)      if err != nil {        ...      }      ...      foo := &pb.Foo{}      if err := any.UnmarshalTo(foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }  # noqa: E501

        :return: The consensus_state of this IbcCoreClientV1QueryConsensusStateResponse.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._consensus_state

    @consensus_state.setter
    def consensus_state(self, consensus_state):
        """Sets the consensus_state of this IbcCoreClientV1QueryConsensusStateResponse.

        `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := anypb.New(foo)      if err != nil {        ...      }      ...      foo := &pb.Foo{}      if err := any.UnmarshalTo(foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }  # noqa: E501

        :param consensus_state: The consensus_state of this IbcCoreClientV1QueryConsensusStateResponse.  # noqa: E501
        :type: dict(str, object)
        """

        self._consensus_state = consensus_state

    @property
    def proof(self):
        """Gets the proof of this IbcCoreClientV1QueryConsensusStateResponse.  # noqa: E501


        :return: The proof of this IbcCoreClientV1QueryConsensusStateResponse.  # noqa: E501
        :rtype: str
        """
        return self._proof

    @proof.setter
    def proof(self, proof):
        """Sets the proof of this IbcCoreClientV1QueryConsensusStateResponse.


        :param proof: The proof of this IbcCoreClientV1QueryConsensusStateResponse.  # noqa: E501
        :type: str
        """

        self._proof = proof

    @property
    def proof_height(self):
        """Gets the proof_height of this IbcCoreClientV1QueryConsensusStateResponse.  # noqa: E501


        :return: The proof_height of this IbcCoreClientV1QueryConsensusStateResponse.  # noqa: E501
        :rtype: HeightAtWhichTheProofWasRetrieved
        """
        return self._proof_height

    @proof_height.setter
    def proof_height(self, proof_height):
        """Sets the proof_height of this IbcCoreClientV1QueryConsensusStateResponse.


        :param proof_height: The proof_height of this IbcCoreClientV1QueryConsensusStateResponse.  # noqa: E501
        :type: HeightAtWhichTheProofWasRetrieved
        """

        self._proof_height = proof_height

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IbcCoreClientV1QueryConsensusStateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IbcCoreClientV1QueryConsensusStateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
