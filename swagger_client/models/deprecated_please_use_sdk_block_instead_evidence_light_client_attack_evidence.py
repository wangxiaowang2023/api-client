# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conflicting_block': 'DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidenceConflictingBlock',
        'common_height': 'str',
        'byzantine_validators': 'list[CosmosBaseTendermintV1beta1BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators]',
        'total_voting_power': 'str',
        'timestamp': 'datetime'
    }

    attribute_map = {
        'conflicting_block': 'conflicting_block',
        'common_height': 'common_height',
        'byzantine_validators': 'byzantine_validators',
        'total_voting_power': 'total_voting_power',
        'timestamp': 'timestamp'
    }

    def __init__(self, conflicting_block=None, common_height=None, byzantine_validators=None, total_voting_power=None, timestamp=None):  # noqa: E501
        """DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence - a model defined in Swagger"""  # noqa: E501
        self._conflicting_block = None
        self._common_height = None
        self._byzantine_validators = None
        self._total_voting_power = None
        self._timestamp = None
        self.discriminator = None
        if conflicting_block is not None:
            self.conflicting_block = conflicting_block
        if common_height is not None:
            self.common_height = common_height
        if byzantine_validators is not None:
            self.byzantine_validators = byzantine_validators
        if total_voting_power is not None:
            self.total_voting_power = total_voting_power
        if timestamp is not None:
            self.timestamp = timestamp

    @property
    def conflicting_block(self):
        """Gets the conflicting_block of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.  # noqa: E501


        :return: The conflicting_block of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.  # noqa: E501
        :rtype: DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidenceConflictingBlock
        """
        return self._conflicting_block

    @conflicting_block.setter
    def conflicting_block(self, conflicting_block):
        """Sets the conflicting_block of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.


        :param conflicting_block: The conflicting_block of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.  # noqa: E501
        :type: DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidenceConflictingBlock
        """

        self._conflicting_block = conflicting_block

    @property
    def common_height(self):
        """Gets the common_height of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.  # noqa: E501


        :return: The common_height of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.  # noqa: E501
        :rtype: str
        """
        return self._common_height

    @common_height.setter
    def common_height(self, common_height):
        """Sets the common_height of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.


        :param common_height: The common_height of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.  # noqa: E501
        :type: str
        """

        self._common_height = common_height

    @property
    def byzantine_validators(self):
        """Gets the byzantine_validators of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.  # noqa: E501


        :return: The byzantine_validators of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.  # noqa: E501
        :rtype: list[CosmosBaseTendermintV1beta1BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators]
        """
        return self._byzantine_validators

    @byzantine_validators.setter
    def byzantine_validators(self, byzantine_validators):
        """Sets the byzantine_validators of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.


        :param byzantine_validators: The byzantine_validators of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.  # noqa: E501
        :type: list[CosmosBaseTendermintV1beta1BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators]
        """

        self._byzantine_validators = byzantine_validators

    @property
    def total_voting_power(self):
        """Gets the total_voting_power of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.  # noqa: E501


        :return: The total_voting_power of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.  # noqa: E501
        :rtype: str
        """
        return self._total_voting_power

    @total_voting_power.setter
    def total_voting_power(self, total_voting_power):
        """Sets the total_voting_power of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.


        :param total_voting_power: The total_voting_power of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.  # noqa: E501
        :type: str
        """

        self._total_voting_power = total_voting_power

    @property
    def timestamp(self):
        """Gets the timestamp of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.  # noqa: E501


        :return: The timestamp of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.


        :param timestamp: The timestamp of this DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeprecatedPleaseUseSdkBlockInsteadEvidenceLightClientAttackEvidence):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
