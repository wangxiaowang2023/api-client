# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class V1UpdateMemberBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin': 'str',
        'group_id': 'str',
        'member_updates': 'list[Cosmosgroupv1createGroupMembers]',
        'owner': 'str',
        'is_send_rewards': 'bool'
    }

    attribute_map = {
        'admin': 'admin',
        'group_id': 'group_id',
        'member_updates': 'member_updates',
        'owner': 'owner',
        'is_send_rewards': 'isSendRewards'
    }

    def __init__(self, admin=None, group_id=None, member_updates=None, owner=None, is_send_rewards=None):  # noqa: E501
        """V1UpdateMemberBody - a model defined in Swagger"""  # noqa: E501
        self._admin = None
        self._group_id = None
        self._member_updates = None
        self._owner = None
        self._is_send_rewards = None
        self.discriminator = None
        if admin is not None:
            self.admin = admin
        if group_id is not None:
            self.group_id = group_id
        if member_updates is not None:
            self.member_updates = member_updates
        if owner is not None:
            self.owner = owner
        if is_send_rewards is not None:
            self.is_send_rewards = is_send_rewards

    @property
    def admin(self):
        """Gets the admin of this V1UpdateMemberBody.  # noqa: E501

        admin is the account address of the group admin.  # noqa: E501

        :return: The admin of this V1UpdateMemberBody.  # noqa: E501
        :rtype: str
        """
        return self._admin

    @admin.setter
    def admin(self, admin):
        """Sets the admin of this V1UpdateMemberBody.

        admin is the account address of the group admin.  # noqa: E501

        :param admin: The admin of this V1UpdateMemberBody.  # noqa: E501
        :type: str
        """

        self._admin = admin

    @property
    def group_id(self):
        """Gets the group_id of this V1UpdateMemberBody.  # noqa: E501

        group_id is the unique ID of the group.  # noqa: E501

        :return: The group_id of this V1UpdateMemberBody.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this V1UpdateMemberBody.

        group_id is the unique ID of the group.  # noqa: E501

        :param group_id: The group_id of this V1UpdateMemberBody.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def member_updates(self):
        """Gets the member_updates of this V1UpdateMemberBody.  # noqa: E501

        member_updates is the list of members to update, set weight to 0 to remove a member.  # noqa: E501

        :return: The member_updates of this V1UpdateMemberBody.  # noqa: E501
        :rtype: list[Cosmosgroupv1createGroupMembers]
        """
        return self._member_updates

    @member_updates.setter
    def member_updates(self, member_updates):
        """Sets the member_updates of this V1UpdateMemberBody.

        member_updates is the list of members to update, set weight to 0 to remove a member.  # noqa: E501

        :param member_updates: The member_updates of this V1UpdateMemberBody.  # noqa: E501
        :type: list[Cosmosgroupv1createGroupMembers]
        """

        self._member_updates = member_updates

    @property
    def owner(self):
        """Gets the owner of this V1UpdateMemberBody.  # noqa: E501


        :return: The owner of this V1UpdateMemberBody.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this V1UpdateMemberBody.


        :param owner: The owner of this V1UpdateMemberBody.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def is_send_rewards(self):
        """Gets the is_send_rewards of this V1UpdateMemberBody.  # noqa: E501


        :return: The is_send_rewards of this V1UpdateMemberBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_send_rewards

    @is_send_rewards.setter
    def is_send_rewards(self, is_send_rewards):
        """Sets the is_send_rewards of this V1UpdateMemberBody.


        :param is_send_rewards: The is_send_rewards of this V1UpdateMemberBody.  # noqa: E501
        :type: bool
        """

        self._is_send_rewards = is_send_rewards

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1UpdateMemberBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1UpdateMemberBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
