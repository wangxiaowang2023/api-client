# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CosmosBaseAbciV1beta1ABCIMessageLog(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'msg_index': 'int',
        'log': 'str',
        'events': 'list[CosmosBaseAbciV1beta1ABCIMessageLogEvents]'
    }

    attribute_map = {
        'msg_index': 'msg_index',
        'log': 'log',
        'events': 'events'
    }

    def __init__(self, msg_index=None, log=None, events=None):  # noqa: E501
        """CosmosBaseAbciV1beta1ABCIMessageLog - a model defined in Swagger"""  # noqa: E501
        self._msg_index = None
        self._log = None
        self._events = None
        self.discriminator = None
        if msg_index is not None:
            self.msg_index = msg_index
        if log is not None:
            self.log = log
        if events is not None:
            self.events = events

    @property
    def msg_index(self):
        """Gets the msg_index of this CosmosBaseAbciV1beta1ABCIMessageLog.  # noqa: E501


        :return: The msg_index of this CosmosBaseAbciV1beta1ABCIMessageLog.  # noqa: E501
        :rtype: int
        """
        return self._msg_index

    @msg_index.setter
    def msg_index(self, msg_index):
        """Sets the msg_index of this CosmosBaseAbciV1beta1ABCIMessageLog.


        :param msg_index: The msg_index of this CosmosBaseAbciV1beta1ABCIMessageLog.  # noqa: E501
        :type: int
        """

        self._msg_index = msg_index

    @property
    def log(self):
        """Gets the log of this CosmosBaseAbciV1beta1ABCIMessageLog.  # noqa: E501


        :return: The log of this CosmosBaseAbciV1beta1ABCIMessageLog.  # noqa: E501
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this CosmosBaseAbciV1beta1ABCIMessageLog.


        :param log: The log of this CosmosBaseAbciV1beta1ABCIMessageLog.  # noqa: E501
        :type: str
        """

        self._log = log

    @property
    def events(self):
        """Gets the events of this CosmosBaseAbciV1beta1ABCIMessageLog.  # noqa: E501

        Events contains a slice of Event objects that were emitted during some execution.  # noqa: E501

        :return: The events of this CosmosBaseAbciV1beta1ABCIMessageLog.  # noqa: E501
        :rtype: list[CosmosBaseAbciV1beta1ABCIMessageLogEvents]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this CosmosBaseAbciV1beta1ABCIMessageLog.

        Events contains a slice of Event objects that were emitted during some execution.  # noqa: E501

        :param events: The events of this CosmosBaseAbciV1beta1ABCIMessageLog.  # noqa: E501
        :type: list[CosmosBaseAbciV1beta1ABCIMessageLogEvents]
        """

        self._events = events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CosmosBaseAbciV1beta1ABCIMessageLog, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CosmosBaseAbciV1beta1ABCIMessageLog):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
