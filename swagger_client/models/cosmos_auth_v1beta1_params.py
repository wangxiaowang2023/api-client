# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CosmosAuthV1beta1Params(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_memo_characters': 'str',
        'tx_sig_limit': 'str',
        'tx_size_cost_per_byte': 'str',
        'sig_verify_cost_ed25519': 'str',
        'sig_verify_cost_secp256k1': 'str'
    }

    attribute_map = {
        'max_memo_characters': 'max_memo_characters',
        'tx_sig_limit': 'tx_sig_limit',
        'tx_size_cost_per_byte': 'tx_size_cost_per_byte',
        'sig_verify_cost_ed25519': 'sig_verify_cost_ed25519',
        'sig_verify_cost_secp256k1': 'sig_verify_cost_secp256k1'
    }

    def __init__(self, max_memo_characters=None, tx_sig_limit=None, tx_size_cost_per_byte=None, sig_verify_cost_ed25519=None, sig_verify_cost_secp256k1=None):  # noqa: E501
        """CosmosAuthV1beta1Params - a model defined in Swagger"""  # noqa: E501
        self._max_memo_characters = None
        self._tx_sig_limit = None
        self._tx_size_cost_per_byte = None
        self._sig_verify_cost_ed25519 = None
        self._sig_verify_cost_secp256k1 = None
        self.discriminator = None
        if max_memo_characters is not None:
            self.max_memo_characters = max_memo_characters
        if tx_sig_limit is not None:
            self.tx_sig_limit = tx_sig_limit
        if tx_size_cost_per_byte is not None:
            self.tx_size_cost_per_byte = tx_size_cost_per_byte
        if sig_verify_cost_ed25519 is not None:
            self.sig_verify_cost_ed25519 = sig_verify_cost_ed25519
        if sig_verify_cost_secp256k1 is not None:
            self.sig_verify_cost_secp256k1 = sig_verify_cost_secp256k1

    @property
    def max_memo_characters(self):
        """Gets the max_memo_characters of this CosmosAuthV1beta1Params.  # noqa: E501


        :return: The max_memo_characters of this CosmosAuthV1beta1Params.  # noqa: E501
        :rtype: str
        """
        return self._max_memo_characters

    @max_memo_characters.setter
    def max_memo_characters(self, max_memo_characters):
        """Sets the max_memo_characters of this CosmosAuthV1beta1Params.


        :param max_memo_characters: The max_memo_characters of this CosmosAuthV1beta1Params.  # noqa: E501
        :type: str
        """

        self._max_memo_characters = max_memo_characters

    @property
    def tx_sig_limit(self):
        """Gets the tx_sig_limit of this CosmosAuthV1beta1Params.  # noqa: E501


        :return: The tx_sig_limit of this CosmosAuthV1beta1Params.  # noqa: E501
        :rtype: str
        """
        return self._tx_sig_limit

    @tx_sig_limit.setter
    def tx_sig_limit(self, tx_sig_limit):
        """Sets the tx_sig_limit of this CosmosAuthV1beta1Params.


        :param tx_sig_limit: The tx_sig_limit of this CosmosAuthV1beta1Params.  # noqa: E501
        :type: str
        """

        self._tx_sig_limit = tx_sig_limit

    @property
    def tx_size_cost_per_byte(self):
        """Gets the tx_size_cost_per_byte of this CosmosAuthV1beta1Params.  # noqa: E501


        :return: The tx_size_cost_per_byte of this CosmosAuthV1beta1Params.  # noqa: E501
        :rtype: str
        """
        return self._tx_size_cost_per_byte

    @tx_size_cost_per_byte.setter
    def tx_size_cost_per_byte(self, tx_size_cost_per_byte):
        """Sets the tx_size_cost_per_byte of this CosmosAuthV1beta1Params.


        :param tx_size_cost_per_byte: The tx_size_cost_per_byte of this CosmosAuthV1beta1Params.  # noqa: E501
        :type: str
        """

        self._tx_size_cost_per_byte = tx_size_cost_per_byte

    @property
    def sig_verify_cost_ed25519(self):
        """Gets the sig_verify_cost_ed25519 of this CosmosAuthV1beta1Params.  # noqa: E501


        :return: The sig_verify_cost_ed25519 of this CosmosAuthV1beta1Params.  # noqa: E501
        :rtype: str
        """
        return self._sig_verify_cost_ed25519

    @sig_verify_cost_ed25519.setter
    def sig_verify_cost_ed25519(self, sig_verify_cost_ed25519):
        """Sets the sig_verify_cost_ed25519 of this CosmosAuthV1beta1Params.


        :param sig_verify_cost_ed25519: The sig_verify_cost_ed25519 of this CosmosAuthV1beta1Params.  # noqa: E501
        :type: str
        """

        self._sig_verify_cost_ed25519 = sig_verify_cost_ed25519

    @property
    def sig_verify_cost_secp256k1(self):
        """Gets the sig_verify_cost_secp256k1 of this CosmosAuthV1beta1Params.  # noqa: E501


        :return: The sig_verify_cost_secp256k1 of this CosmosAuthV1beta1Params.  # noqa: E501
        :rtype: str
        """
        return self._sig_verify_cost_secp256k1

    @sig_verify_cost_secp256k1.setter
    def sig_verify_cost_secp256k1(self, sig_verify_cost_secp256k1):
        """Sets the sig_verify_cost_secp256k1 of this CosmosAuthV1beta1Params.


        :param sig_verify_cost_secp256k1: The sig_verify_cost_secp256k1 of this CosmosAuthV1beta1Params.  # noqa: E501
        :type: str
        """

        self._sig_verify_cost_secp256k1 = sig_verify_cost_secp256k1

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CosmosAuthV1beta1Params, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CosmosAuthV1beta1Params):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
