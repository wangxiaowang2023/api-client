# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CosmosTxV1beta1AuthInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'signer_infos': 'list[CosmosTxV1beta1SignerInfo]',
        'fee': 'CosmosTxV1beta1AuthInfoFee',
        'tip': 'CosmosTxV1beta1AuthInfoTip'
    }

    attribute_map = {
        'signer_infos': 'signer_infos',
        'fee': 'fee',
        'tip': 'tip'
    }

    def __init__(self, signer_infos=None, fee=None, tip=None):  # noqa: E501
        """CosmosTxV1beta1AuthInfo - a model defined in Swagger"""  # noqa: E501
        self._signer_infos = None
        self._fee = None
        self._tip = None
        self.discriminator = None
        if signer_infos is not None:
            self.signer_infos = signer_infos
        if fee is not None:
            self.fee = fee
        if tip is not None:
            self.tip = tip

    @property
    def signer_infos(self):
        """Gets the signer_infos of this CosmosTxV1beta1AuthInfo.  # noqa: E501

        signer_infos defines the signing modes for the required signers. The number and order of elements must match the required signers from TxBody's messages. The first element is the primary signer and the one which pays the fee.  # noqa: E501

        :return: The signer_infos of this CosmosTxV1beta1AuthInfo.  # noqa: E501
        :rtype: list[CosmosTxV1beta1SignerInfo]
        """
        return self._signer_infos

    @signer_infos.setter
    def signer_infos(self, signer_infos):
        """Sets the signer_infos of this CosmosTxV1beta1AuthInfo.

        signer_infos defines the signing modes for the required signers. The number and order of elements must match the required signers from TxBody's messages. The first element is the primary signer and the one which pays the fee.  # noqa: E501

        :param signer_infos: The signer_infos of this CosmosTxV1beta1AuthInfo.  # noqa: E501
        :type: list[CosmosTxV1beta1SignerInfo]
        """

        self._signer_infos = signer_infos

    @property
    def fee(self):
        """Gets the fee of this CosmosTxV1beta1AuthInfo.  # noqa: E501


        :return: The fee of this CosmosTxV1beta1AuthInfo.  # noqa: E501
        :rtype: CosmosTxV1beta1AuthInfoFee
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this CosmosTxV1beta1AuthInfo.


        :param fee: The fee of this CosmosTxV1beta1AuthInfo.  # noqa: E501
        :type: CosmosTxV1beta1AuthInfoFee
        """

        self._fee = fee

    @property
    def tip(self):
        """Gets the tip of this CosmosTxV1beta1AuthInfo.  # noqa: E501


        :return: The tip of this CosmosTxV1beta1AuthInfo.  # noqa: E501
        :rtype: CosmosTxV1beta1AuthInfoTip
        """
        return self._tip

    @tip.setter
    def tip(self, tip):
        """Sets the tip of this CosmosTxV1beta1AuthInfo.


        :param tip: The tip of this CosmosTxV1beta1AuthInfo.  # noqa: E501
        :type: CosmosTxV1beta1AuthInfoTip
        """

        self._tip = tip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CosmosTxV1beta1AuthInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CosmosTxV1beta1AuthInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
