# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CosmosDistributionV1beta1QueryValidatorDistributionInfoResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operator_address': 'str',
        'self_bond_rewards': 'list[CosmosDistributionV1beta1QueryDelegationRewardsResponseRewards]',
        'commission': 'list[CosmosDistributionV1beta1QueryDelegationRewardsResponseRewards]'
    }

    attribute_map = {
        'operator_address': 'operator_address',
        'self_bond_rewards': 'self_bond_rewards',
        'commission': 'commission'
    }

    def __init__(self, operator_address=None, self_bond_rewards=None, commission=None):  # noqa: E501
        """CosmosDistributionV1beta1QueryValidatorDistributionInfoResponse - a model defined in Swagger"""  # noqa: E501
        self._operator_address = None
        self._self_bond_rewards = None
        self._commission = None
        self.discriminator = None
        if operator_address is not None:
            self.operator_address = operator_address
        if self_bond_rewards is not None:
            self.self_bond_rewards = self_bond_rewards
        if commission is not None:
            self.commission = commission

    @property
    def operator_address(self):
        """Gets the operator_address of this CosmosDistributionV1beta1QueryValidatorDistributionInfoResponse.  # noqa: E501

        operator_address defines the validator operator address.  # noqa: E501

        :return: The operator_address of this CosmosDistributionV1beta1QueryValidatorDistributionInfoResponse.  # noqa: E501
        :rtype: str
        """
        return self._operator_address

    @operator_address.setter
    def operator_address(self, operator_address):
        """Sets the operator_address of this CosmosDistributionV1beta1QueryValidatorDistributionInfoResponse.

        operator_address defines the validator operator address.  # noqa: E501

        :param operator_address: The operator_address of this CosmosDistributionV1beta1QueryValidatorDistributionInfoResponse.  # noqa: E501
        :type: str
        """

        self._operator_address = operator_address

    @property
    def self_bond_rewards(self):
        """Gets the self_bond_rewards of this CosmosDistributionV1beta1QueryValidatorDistributionInfoResponse.  # noqa: E501

        self_bond_rewards defines the self delegations rewards.  # noqa: E501

        :return: The self_bond_rewards of this CosmosDistributionV1beta1QueryValidatorDistributionInfoResponse.  # noqa: E501
        :rtype: list[CosmosDistributionV1beta1QueryDelegationRewardsResponseRewards]
        """
        return self._self_bond_rewards

    @self_bond_rewards.setter
    def self_bond_rewards(self, self_bond_rewards):
        """Sets the self_bond_rewards of this CosmosDistributionV1beta1QueryValidatorDistributionInfoResponse.

        self_bond_rewards defines the self delegations rewards.  # noqa: E501

        :param self_bond_rewards: The self_bond_rewards of this CosmosDistributionV1beta1QueryValidatorDistributionInfoResponse.  # noqa: E501
        :type: list[CosmosDistributionV1beta1QueryDelegationRewardsResponseRewards]
        """

        self._self_bond_rewards = self_bond_rewards

    @property
    def commission(self):
        """Gets the commission of this CosmosDistributionV1beta1QueryValidatorDistributionInfoResponse.  # noqa: E501

        commission defines the commission the validator received.  # noqa: E501

        :return: The commission of this CosmosDistributionV1beta1QueryValidatorDistributionInfoResponse.  # noqa: E501
        :rtype: list[CosmosDistributionV1beta1QueryDelegationRewardsResponseRewards]
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this CosmosDistributionV1beta1QueryValidatorDistributionInfoResponse.

        commission defines the commission the validator received.  # noqa: E501

        :param commission: The commission of this CosmosDistributionV1beta1QueryValidatorDistributionInfoResponse.  # noqa: E501
        :type: list[CosmosDistributionV1beta1QueryDelegationRewardsResponseRewards]
        """

        self._commission = commission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CosmosDistributionV1beta1QueryValidatorDistributionInfoResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CosmosDistributionV1beta1QueryValidatorDistributionInfoResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
