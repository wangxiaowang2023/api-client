# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'time': 'datetime',
        'height': 'str',
        'info': 'str',
        'upgraded_client_state': 'dict(str, object)'
    }

    attribute_map = {
        'name': 'name',
        'time': 'time',
        'height': 'height',
        'info': 'info',
        'upgraded_client_state': 'upgraded_client_state'
    }

    def __init__(self, name=None, time=None, height=None, info=None, upgraded_client_state=None):  # noqa: E501
        """CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._time = None
        self._height = None
        self._info = None
        self._upgraded_client_state = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if time is not None:
            self.time = time
        if height is not None:
            self.height = height
        if info is not None:
            self.info = info
        if upgraded_client_state is not None:
            self.upgraded_client_state = upgraded_client_state

    @property
    def name(self):
        """Gets the name of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.  # noqa: E501

        Sets the name for the upgrade. This name will be used by the upgraded version of the software to apply any special \"on-upgrade\" commands during the first BeginBlock method after the upgrade is applied. It is also used to detect whether a software version can handle a given upgrade. If no upgrade handler with this name has been set in the software, it will be assumed that the software is out-of-date when the upgrade Time or Height is reached and the software will exit.  # noqa: E501

        :return: The name of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.

        Sets the name for the upgrade. This name will be used by the upgraded version of the software to apply any special \"on-upgrade\" commands during the first BeginBlock method after the upgrade is applied. It is also used to detect whether a software version can handle a given upgrade. If no upgrade handler with this name has been set in the software, it will be assumed that the software is out-of-date when the upgrade Time or Height is reached and the software will exit.  # noqa: E501

        :param name: The name of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def time(self):
        """Gets the time of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.  # noqa: E501

        Deprecated: Time based upgrades have been deprecated. Time based upgrade logic has been removed from the SDK. If this field is not empty, an error will be thrown.  # noqa: E501

        :return: The time of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.

        Deprecated: Time based upgrades have been deprecated. Time based upgrade logic has been removed from the SDK. If this field is not empty, an error will be thrown.  # noqa: E501

        :param time: The time of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def height(self):
        """Gets the height of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.  # noqa: E501

        The height at which the upgrade must be performed.  # noqa: E501

        :return: The height of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.  # noqa: E501
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.

        The height at which the upgrade must be performed.  # noqa: E501

        :param height: The height of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.  # noqa: E501
        :type: str
        """

        self._height = height

    @property
    def info(self):
        """Gets the info of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.  # noqa: E501


        :return: The info of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.


        :param info: The info of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def upgraded_client_state(self):
        """Gets the upgraded_client_state of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.  # noqa: E501

        Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been moved to the IBC module in the sub module 02-client. If this field is not empty, an error will be thrown.  # noqa: E501

        :return: The upgraded_client_state of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._upgraded_client_state

    @upgraded_client_state.setter
    def upgraded_client_state(self, upgraded_client_state):
        """Sets the upgraded_client_state of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.

        Deprecated: UpgradedClientState field has been deprecated. IBC upgrade logic has been moved to the IBC module in the sub module 02-client. If this field is not empty, an error will be thrown.  # noqa: E501

        :param upgraded_client_state: The upgraded_client_state of this CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan.  # noqa: E501
        :type: dict(str, object)
        """

        self._upgraded_client_state = upgraded_client_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CosmosUpgradeV1beta1QueryCurrentPlanResponsePlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
