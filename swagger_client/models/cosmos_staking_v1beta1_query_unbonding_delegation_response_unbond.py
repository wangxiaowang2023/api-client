# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delegator_address': 'str',
        'validator_address': 'str',
        'entries': 'list[CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbondEntries]'
    }

    attribute_map = {
        'delegator_address': 'delegator_address',
        'validator_address': 'validator_address',
        'entries': 'entries'
    }

    def __init__(self, delegator_address=None, validator_address=None, entries=None):  # noqa: E501
        """CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond - a model defined in Swagger"""  # noqa: E501
        self._delegator_address = None
        self._validator_address = None
        self._entries = None
        self.discriminator = None
        if delegator_address is not None:
            self.delegator_address = delegator_address
        if validator_address is not None:
            self.validator_address = validator_address
        if entries is not None:
            self.entries = entries

    @property
    def delegator_address(self):
        """Gets the delegator_address of this CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond.  # noqa: E501

        delegator_address is the bech32-encoded address of the delegator.  # noqa: E501

        :return: The delegator_address of this CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond.  # noqa: E501
        :rtype: str
        """
        return self._delegator_address

    @delegator_address.setter
    def delegator_address(self, delegator_address):
        """Sets the delegator_address of this CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond.

        delegator_address is the bech32-encoded address of the delegator.  # noqa: E501

        :param delegator_address: The delegator_address of this CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond.  # noqa: E501
        :type: str
        """

        self._delegator_address = delegator_address

    @property
    def validator_address(self):
        """Gets the validator_address of this CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond.  # noqa: E501

        validator_address is the bech32-encoded address of the validator.  # noqa: E501

        :return: The validator_address of this CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond.  # noqa: E501
        :rtype: str
        """
        return self._validator_address

    @validator_address.setter
    def validator_address(self, validator_address):
        """Sets the validator_address of this CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond.

        validator_address is the bech32-encoded address of the validator.  # noqa: E501

        :param validator_address: The validator_address of this CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond.  # noqa: E501
        :type: str
        """

        self._validator_address = validator_address

    @property
    def entries(self):
        """Gets the entries of this CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond.  # noqa: E501

        entries are the unbonding delegation entries.  unbonding delegation entries  # noqa: E501

        :return: The entries of this CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond.  # noqa: E501
        :rtype: list[CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbondEntries]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond.

        entries are the unbonding delegation entries.  unbonding delegation entries  # noqa: E501

        :param entries: The entries of this CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond.  # noqa: E501
        :type: list[CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbondEntries]
        """

        self._entries = entries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CosmosStakingV1beta1QueryUnbondingDelegationResponseUnbond):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
