# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CosmosGovV1Params(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_deposit': 'list[CosmosBankV1beta1InputCoins]',
        'max_deposit_period': 'str',
        'voting_period': 'str',
        'quorum': 'str',
        'threshold': 'str',
        'veto_threshold': 'str',
        'min_initial_deposit_ratio': 'str',
        'burn_vote_quorum': 'bool',
        'burn_proposal_deposit_prevote': 'bool',
        'burn_vote_veto': 'bool'
    }

    attribute_map = {
        'min_deposit': 'min_deposit',
        'max_deposit_period': 'max_deposit_period',
        'voting_period': 'voting_period',
        'quorum': 'quorum',
        'threshold': 'threshold',
        'veto_threshold': 'veto_threshold',
        'min_initial_deposit_ratio': 'min_initial_deposit_ratio',
        'burn_vote_quorum': 'burn_vote_quorum',
        'burn_proposal_deposit_prevote': 'burn_proposal_deposit_prevote',
        'burn_vote_veto': 'burn_vote_veto'
    }

    def __init__(self, min_deposit=None, max_deposit_period=None, voting_period=None, quorum=None, threshold=None, veto_threshold=None, min_initial_deposit_ratio=None, burn_vote_quorum=None, burn_proposal_deposit_prevote=None, burn_vote_veto=None):  # noqa: E501
        """CosmosGovV1Params - a model defined in Swagger"""  # noqa: E501
        self._min_deposit = None
        self._max_deposit_period = None
        self._voting_period = None
        self._quorum = None
        self._threshold = None
        self._veto_threshold = None
        self._min_initial_deposit_ratio = None
        self._burn_vote_quorum = None
        self._burn_proposal_deposit_prevote = None
        self._burn_vote_veto = None
        self.discriminator = None
        if min_deposit is not None:
            self.min_deposit = min_deposit
        if max_deposit_period is not None:
            self.max_deposit_period = max_deposit_period
        if voting_period is not None:
            self.voting_period = voting_period
        if quorum is not None:
            self.quorum = quorum
        if threshold is not None:
            self.threshold = threshold
        if veto_threshold is not None:
            self.veto_threshold = veto_threshold
        if min_initial_deposit_ratio is not None:
            self.min_initial_deposit_ratio = min_initial_deposit_ratio
        if burn_vote_quorum is not None:
            self.burn_vote_quorum = burn_vote_quorum
        if burn_proposal_deposit_prevote is not None:
            self.burn_proposal_deposit_prevote = burn_proposal_deposit_prevote
        if burn_vote_veto is not None:
            self.burn_vote_veto = burn_vote_veto

    @property
    def min_deposit(self):
        """Gets the min_deposit of this CosmosGovV1Params.  # noqa: E501

        Minimum deposit for a proposal to enter voting period.  # noqa: E501

        :return: The min_deposit of this CosmosGovV1Params.  # noqa: E501
        :rtype: list[CosmosBankV1beta1InputCoins]
        """
        return self._min_deposit

    @min_deposit.setter
    def min_deposit(self, min_deposit):
        """Sets the min_deposit of this CosmosGovV1Params.

        Minimum deposit for a proposal to enter voting period.  # noqa: E501

        :param min_deposit: The min_deposit of this CosmosGovV1Params.  # noqa: E501
        :type: list[CosmosBankV1beta1InputCoins]
        """

        self._min_deposit = min_deposit

    @property
    def max_deposit_period(self):
        """Gets the max_deposit_period of this CosmosGovV1Params.  # noqa: E501

        Maximum period for Atom holders to deposit on a proposal. Initial value: 2 months.  # noqa: E501

        :return: The max_deposit_period of this CosmosGovV1Params.  # noqa: E501
        :rtype: str
        """
        return self._max_deposit_period

    @max_deposit_period.setter
    def max_deposit_period(self, max_deposit_period):
        """Sets the max_deposit_period of this CosmosGovV1Params.

        Maximum period for Atom holders to deposit on a proposal. Initial value: 2 months.  # noqa: E501

        :param max_deposit_period: The max_deposit_period of this CosmosGovV1Params.  # noqa: E501
        :type: str
        """

        self._max_deposit_period = max_deposit_period

    @property
    def voting_period(self):
        """Gets the voting_period of this CosmosGovV1Params.  # noqa: E501

        Duration of the voting period.  # noqa: E501

        :return: The voting_period of this CosmosGovV1Params.  # noqa: E501
        :rtype: str
        """
        return self._voting_period

    @voting_period.setter
    def voting_period(self, voting_period):
        """Sets the voting_period of this CosmosGovV1Params.

        Duration of the voting period.  # noqa: E501

        :param voting_period: The voting_period of this CosmosGovV1Params.  # noqa: E501
        :type: str
        """

        self._voting_period = voting_period

    @property
    def quorum(self):
        """Gets the quorum of this CosmosGovV1Params.  # noqa: E501

        Minimum percentage of total stake needed to vote for a result to be  considered valid.  # noqa: E501

        :return: The quorum of this CosmosGovV1Params.  # noqa: E501
        :rtype: str
        """
        return self._quorum

    @quorum.setter
    def quorum(self, quorum):
        """Sets the quorum of this CosmosGovV1Params.

        Minimum percentage of total stake needed to vote for a result to be  considered valid.  # noqa: E501

        :param quorum: The quorum of this CosmosGovV1Params.  # noqa: E501
        :type: str
        """

        self._quorum = quorum

    @property
    def threshold(self):
        """Gets the threshold of this CosmosGovV1Params.  # noqa: E501

        Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.  # noqa: E501

        :return: The threshold of this CosmosGovV1Params.  # noqa: E501
        :rtype: str
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this CosmosGovV1Params.

        Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.  # noqa: E501

        :param threshold: The threshold of this CosmosGovV1Params.  # noqa: E501
        :type: str
        """

        self._threshold = threshold

    @property
    def veto_threshold(self):
        """Gets the veto_threshold of this CosmosGovV1Params.  # noqa: E501

        Minimum value of Veto votes to Total votes ratio for proposal to be  vetoed. Default value: 1/3.  # noqa: E501

        :return: The veto_threshold of this CosmosGovV1Params.  # noqa: E501
        :rtype: str
        """
        return self._veto_threshold

    @veto_threshold.setter
    def veto_threshold(self, veto_threshold):
        """Sets the veto_threshold of this CosmosGovV1Params.

        Minimum value of Veto votes to Total votes ratio for proposal to be  vetoed. Default value: 1/3.  # noqa: E501

        :param veto_threshold: The veto_threshold of this CosmosGovV1Params.  # noqa: E501
        :type: str
        """

        self._veto_threshold = veto_threshold

    @property
    def min_initial_deposit_ratio(self):
        """Gets the min_initial_deposit_ratio of this CosmosGovV1Params.  # noqa: E501

        The ratio representing the proportion of the deposit value that must be paid at proposal submission.  # noqa: E501

        :return: The min_initial_deposit_ratio of this CosmosGovV1Params.  # noqa: E501
        :rtype: str
        """
        return self._min_initial_deposit_ratio

    @min_initial_deposit_ratio.setter
    def min_initial_deposit_ratio(self, min_initial_deposit_ratio):
        """Sets the min_initial_deposit_ratio of this CosmosGovV1Params.

        The ratio representing the proportion of the deposit value that must be paid at proposal submission.  # noqa: E501

        :param min_initial_deposit_ratio: The min_initial_deposit_ratio of this CosmosGovV1Params.  # noqa: E501
        :type: str
        """

        self._min_initial_deposit_ratio = min_initial_deposit_ratio

    @property
    def burn_vote_quorum(self):
        """Gets the burn_vote_quorum of this CosmosGovV1Params.  # noqa: E501


        :return: The burn_vote_quorum of this CosmosGovV1Params.  # noqa: E501
        :rtype: bool
        """
        return self._burn_vote_quorum

    @burn_vote_quorum.setter
    def burn_vote_quorum(self, burn_vote_quorum):
        """Sets the burn_vote_quorum of this CosmosGovV1Params.


        :param burn_vote_quorum: The burn_vote_quorum of this CosmosGovV1Params.  # noqa: E501
        :type: bool
        """

        self._burn_vote_quorum = burn_vote_quorum

    @property
    def burn_proposal_deposit_prevote(self):
        """Gets the burn_proposal_deposit_prevote of this CosmosGovV1Params.  # noqa: E501


        :return: The burn_proposal_deposit_prevote of this CosmosGovV1Params.  # noqa: E501
        :rtype: bool
        """
        return self._burn_proposal_deposit_prevote

    @burn_proposal_deposit_prevote.setter
    def burn_proposal_deposit_prevote(self, burn_proposal_deposit_prevote):
        """Sets the burn_proposal_deposit_prevote of this CosmosGovV1Params.


        :param burn_proposal_deposit_prevote: The burn_proposal_deposit_prevote of this CosmosGovV1Params.  # noqa: E501
        :type: bool
        """

        self._burn_proposal_deposit_prevote = burn_proposal_deposit_prevote

    @property
    def burn_vote_veto(self):
        """Gets the burn_vote_veto of this CosmosGovV1Params.  # noqa: E501


        :return: The burn_vote_veto of this CosmosGovV1Params.  # noqa: E501
        :rtype: bool
        """
        return self._burn_vote_veto

    @burn_vote_veto.setter
    def burn_vote_veto(self, burn_vote_veto):
        """Sets the burn_vote_veto of this CosmosGovV1Params.


        :param burn_vote_veto: The burn_vote_veto of this CosmosGovV1Params.  # noqa: E501
        :type: bool
        """

        self._burn_vote_veto = burn_vote_veto

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CosmosGovV1Params, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CosmosGovV1Params):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
