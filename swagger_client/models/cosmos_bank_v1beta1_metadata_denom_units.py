# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CosmosBankV1beta1MetadataDenomUnits(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'denom': 'str',
        'exponent': 'int',
        'aliases': 'list[str]'
    }

    attribute_map = {
        'denom': 'denom',
        'exponent': 'exponent',
        'aliases': 'aliases'
    }

    def __init__(self, denom=None, exponent=None, aliases=None):  # noqa: E501
        """CosmosBankV1beta1MetadataDenomUnits - a model defined in Swagger"""  # noqa: E501
        self._denom = None
        self._exponent = None
        self._aliases = None
        self.discriminator = None
        if denom is not None:
            self.denom = denom
        if exponent is not None:
            self.exponent = exponent
        if aliases is not None:
            self.aliases = aliases

    @property
    def denom(self):
        """Gets the denom of this CosmosBankV1beta1MetadataDenomUnits.  # noqa: E501

        denom represents the string name of the given denom unit (e.g uatom).  # noqa: E501

        :return: The denom of this CosmosBankV1beta1MetadataDenomUnits.  # noqa: E501
        :rtype: str
        """
        return self._denom

    @denom.setter
    def denom(self, denom):
        """Sets the denom of this CosmosBankV1beta1MetadataDenomUnits.

        denom represents the string name of the given denom unit (e.g uatom).  # noqa: E501

        :param denom: The denom of this CosmosBankV1beta1MetadataDenomUnits.  # noqa: E501
        :type: str
        """

        self._denom = denom

    @property
    def exponent(self):
        """Gets the exponent of this CosmosBankV1beta1MetadataDenomUnits.  # noqa: E501

        exponent represents power of 10 exponent that one must raise the base_denom to in order to equal the given DenomUnit's denom 1 denom = 10^exponent base_denom (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with exponent = 6, thus: 1 atom = 10^6 uatom).  # noqa: E501

        :return: The exponent of this CosmosBankV1beta1MetadataDenomUnits.  # noqa: E501
        :rtype: int
        """
        return self._exponent

    @exponent.setter
    def exponent(self, exponent):
        """Sets the exponent of this CosmosBankV1beta1MetadataDenomUnits.

        exponent represents power of 10 exponent that one must raise the base_denom to in order to equal the given DenomUnit's denom 1 denom = 10^exponent base_denom (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with exponent = 6, thus: 1 atom = 10^6 uatom).  # noqa: E501

        :param exponent: The exponent of this CosmosBankV1beta1MetadataDenomUnits.  # noqa: E501
        :type: int
        """

        self._exponent = exponent

    @property
    def aliases(self):
        """Gets the aliases of this CosmosBankV1beta1MetadataDenomUnits.  # noqa: E501


        :return: The aliases of this CosmosBankV1beta1MetadataDenomUnits.  # noqa: E501
        :rtype: list[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this CosmosBankV1beta1MetadataDenomUnits.


        :param aliases: The aliases of this CosmosBankV1beta1MetadataDenomUnits.  # noqa: E501
        :type: list[str]
        """

        self._aliases = aliases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CosmosBankV1beta1MetadataDenomUnits, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CosmosBankV1beta1MetadataDenomUnits):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
