# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'denom_units': 'list[CosmosBankV1beta1MetadataDenomUnits]',
        'base': 'str',
        'display': 'str',
        'name': 'str',
        'symbol': 'str',
        'uri': 'str',
        'uri_hash': 'str'
    }

    attribute_map = {
        'description': 'description',
        'denom_units': 'denom_units',
        'base': 'base',
        'display': 'display',
        'name': 'name',
        'symbol': 'symbol',
        'uri': 'uri',
        'uri_hash': 'uri_hash'
    }

    def __init__(self, description=None, denom_units=None, base=None, display=None, name=None, symbol=None, uri=None, uri_hash=None):  # noqa: E501
        """CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._denom_units = None
        self._base = None
        self._display = None
        self._name = None
        self._symbol = None
        self._uri = None
        self._uri_hash = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if denom_units is not None:
            self.denom_units = denom_units
        if base is not None:
            self.base = base
        if display is not None:
            self.display = display
        if name is not None:
            self.name = name
        if symbol is not None:
            self.symbol = symbol
        if uri is not None:
            self.uri = uri
        if uri_hash is not None:
            self.uri_hash = uri_hash

    @property
    def description(self):
        """Gets the description of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501


        :return: The description of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.


        :param description: The description of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def denom_units(self):
        """Gets the denom_units of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501


        :return: The denom_units of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501
        :rtype: list[CosmosBankV1beta1MetadataDenomUnits]
        """
        return self._denom_units

    @denom_units.setter
    def denom_units(self, denom_units):
        """Sets the denom_units of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.


        :param denom_units: The denom_units of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501
        :type: list[CosmosBankV1beta1MetadataDenomUnits]
        """

        self._denom_units = denom_units

    @property
    def base(self):
        """Gets the base of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501

        base represents the base denom (should be the DenomUnit with exponent = 0).  # noqa: E501

        :return: The base of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501
        :rtype: str
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.

        base represents the base denom (should be the DenomUnit with exponent = 0).  # noqa: E501

        :param base: The base of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501
        :type: str
        """

        self._base = base

    @property
    def display(self):
        """Gets the display of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501

        display indicates the suggested denom that should be displayed in clients.  # noqa: E501

        :return: The display of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.

        display indicates the suggested denom that should be displayed in clients.  # noqa: E501

        :param display: The display of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501
        :type: str
        """

        self._display = display

    @property
    def name(self):
        """Gets the name of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501

        Since: cosmos-sdk 0.43  # noqa: E501

        :return: The name of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.

        Since: cosmos-sdk 0.43  # noqa: E501

        :param name: The name of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def symbol(self):
        """Gets the symbol of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501

        symbol is the token symbol usually shown on exchanges (eg: ATOM). This can be the same as the display.  Since: cosmos-sdk 0.43  # noqa: E501

        :return: The symbol of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.

        symbol is the token symbol usually shown on exchanges (eg: ATOM). This can be the same as the display.  Since: cosmos-sdk 0.43  # noqa: E501

        :param symbol: The symbol of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    @property
    def uri(self):
        """Gets the uri of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501

        URI to a document (on or off-chain) that contains additional information. Optional.  Since: cosmos-sdk 0.46  # noqa: E501

        :return: The uri of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.

        URI to a document (on or off-chain) that contains additional information. Optional.  Since: cosmos-sdk 0.46  # noqa: E501

        :param uri: The uri of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def uri_hash(self):
        """Gets the uri_hash of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501

        URIHash is a sha256 hash of a document pointed by URI. It's used to verify that the document didn't change. Optional.  Since: cosmos-sdk 0.46  # noqa: E501

        :return: The uri_hash of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501
        :rtype: str
        """
        return self._uri_hash

    @uri_hash.setter
    def uri_hash(self, uri_hash):
        """Sets the uri_hash of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.

        URIHash is a sha256 hash of a document pointed by URI. It's used to verify that the document didn't change. Optional.  Since: cosmos-sdk 0.46  # noqa: E501

        :param uri_hash: The uri_hash of this CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas.  # noqa: E501
        :type: str
        """

        self._uri_hash = uri_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CosmosBankV1beta1QueryDenomsMetadataResponseMetadatas):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
