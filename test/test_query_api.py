# coding: utf-8

"""
    HTTP API Console

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest

import swagger_client
from swagger_client.api.query_api import QueryApi  # noqa: E501
from swagger_client.rest import ApiException


class TestQueryApi(unittest.TestCase):
    """QueryApi unit test stubs"""

    def setUp(self):
        self.api = QueryApi()  # noqa: E501

    def tearDown(self):
        pass

    def test_cosmos_auth_v1_beta1_account(self):
        """Test case for cosmos_auth_v1_beta1_account

        Account returns account details based on address.  # noqa: E501
        """
        pass

    def test_cosmos_auth_v1_beta1_account_address_by_id(self):
        """Test case for cosmos_auth_v1_beta1_account_address_by_id

        AccountAddressByID returns account address based on account number.  # noqa: E501
        """
        pass

    def test_cosmos_auth_v1_beta1_account_info(self):
        """Test case for cosmos_auth_v1_beta1_account_info

        AccountInfo queries account info which is common to all account types.  # noqa: E501
        """
        pass

    def test_cosmos_auth_v1_beta1_accounts(self):
        """Test case for cosmos_auth_v1_beta1_accounts

        Accounts returns all the existing accounts.  # noqa: E501
        """
        pass

    def test_cosmos_auth_v1_beta1_address_bytes_to_string(self):
        """Test case for cosmos_auth_v1_beta1_address_bytes_to_string

        AddressBytesToString converts Account Address bytes to string  # noqa: E501
        """
        pass

    def test_cosmos_auth_v1_beta1_address_string_to_bytes(self):
        """Test case for cosmos_auth_v1_beta1_address_string_to_bytes

        AddressStringToBytes converts Address string to bytes  # noqa: E501
        """
        pass

    def test_cosmos_auth_v1_beta1_bech32_prefix(self):
        """Test case for cosmos_auth_v1_beta1_bech32_prefix

        Bech32Prefix queries bech32Prefix  # noqa: E501
        """
        pass

    def test_cosmos_auth_v1_beta1_module_account_by_name(self):
        """Test case for cosmos_auth_v1_beta1_module_account_by_name

        ModuleAccountByName returns the module account info by module name  # noqa: E501
        """
        pass

    def test_cosmos_auth_v1_beta1_module_accounts(self):
        """Test case for cosmos_auth_v1_beta1_module_accounts

        ModuleAccounts returns all the existing module accounts.  # noqa: E501
        """
        pass

    def test_cosmos_auth_v1_beta1_params(self):
        """Test case for cosmos_auth_v1_beta1_params

        Params queries all parameters.  # noqa: E501
        """
        pass

    def test_cosmos_authz_v1_beta1_grantee_grants(self):
        """Test case for cosmos_authz_v1_beta1_grantee_grants

        GranteeGrants returns a list of `GrantAuthorization` by grantee.  # noqa: E501
        """
        pass

    def test_cosmos_authz_v1_beta1_granter_grants(self):
        """Test case for cosmos_authz_v1_beta1_granter_grants

        GranterGrants returns list of `GrantAuthorization`, granted by granter.  # noqa: E501
        """
        pass

    def test_cosmos_authz_v1_beta1_grants(self):
        """Test case for cosmos_authz_v1_beta1_grants

        Returns list of `Authorization`, granted to the grantee by the granter.  # noqa: E501
        """
        pass

    def test_cosmos_bank_v1_beta1_all_balances(self):
        """Test case for cosmos_bank_v1_beta1_all_balances

        AllBalances queries the balance of all coins for a single account.  # noqa: E501
        """
        pass

    def test_cosmos_bank_v1_beta1_balance(self):
        """Test case for cosmos_bank_v1_beta1_balance

        Balance queries the balance of a single coin for a single account.  # noqa: E501
        """
        pass

    def test_cosmos_bank_v1_beta1_denom_metadata(self):
        """Test case for cosmos_bank_v1_beta1_denom_metadata

        DenomsMetadata queries the client metadata of a given coin denomination.  # noqa: E501
        """
        pass

    def test_cosmos_bank_v1_beta1_denom_owners(self):
        """Test case for cosmos_bank_v1_beta1_denom_owners

        DenomOwners queries for all account addresses that own a particular token denomination.  # noqa: E501
        """
        pass

    def test_cosmos_bank_v1_beta1_denoms_metadata(self):
        """Test case for cosmos_bank_v1_beta1_denoms_metadata

        DenomsMetadata queries the client metadata for all registered coin denominations.  # noqa: E501
        """
        pass

    def test_cosmos_bank_v1_beta1_params(self):
        """Test case for cosmos_bank_v1_beta1_params

        Params queries the parameters of x/bank module.  # noqa: E501
        """
        pass

    def test_cosmos_bank_v1_beta1_send_enabled(self):
        """Test case for cosmos_bank_v1_beta1_send_enabled

        SendEnabled queries for SendEnabled entries.  # noqa: E501
        """
        pass

    def test_cosmos_bank_v1_beta1_spendable_balance_by_denom(self):
        """Test case for cosmos_bank_v1_beta1_spendable_balance_by_denom

        SpendableBalanceByDenom queries the spendable balance of a single denom for a single account.  # noqa: E501
        """
        pass

    def test_cosmos_bank_v1_beta1_spendable_balances(self):
        """Test case for cosmos_bank_v1_beta1_spendable_balances

        SpendableBalances queries the spendable balance of all coins for a single account.  # noqa: E501
        """
        pass

    def test_cosmos_bank_v1_beta1_supply_of(self):
        """Test case for cosmos_bank_v1_beta1_supply_of

        SupplyOf queries the supply of a single coin.  # noqa: E501
        """
        pass

    def test_cosmos_bank_v1_beta1_total_supply(self):
        """Test case for cosmos_bank_v1_beta1_total_supply

        TotalSupply queries the total supply of all coins.  # noqa: E501
        """
        pass

    def test_cosmos_consensus_v1_params(self):
        """Test case for cosmos_consensus_v1_params

        Params queries the parameters of x/consensus_param module.  # noqa: E501
        """
        pass

    def test_cosmos_distribution_v1_beta1_delegation_rewards(self):
        """Test case for cosmos_distribution_v1_beta1_delegation_rewards

        DelegationRewards queries the total rewards accrued by a delegation.  # noqa: E501
        """
        pass

    def test_cosmos_distribution_v1_beta1_params(self):
        """Test case for cosmos_distribution_v1_beta1_params

        Params queries params of the distribution module.  # noqa: E501
        """
        pass

    def test_cosmos_distribution_v1_beta1_validator_distribution_info(self):
        """Test case for cosmos_distribution_v1_beta1_validator_distribution_info

        ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator  # noqa: E501
        """
        pass

    def test_cosmos_evidence_v1_beta1_all_evidence(self):
        """Test case for cosmos_evidence_v1_beta1_all_evidence

        AllEvidence queries all evidence.  # noqa: E501
        """
        pass

    def test_cosmos_evidence_v1_beta1_evidence(self):
        """Test case for cosmos_evidence_v1_beta1_evidence

        Evidence queries evidence based on evidence hash.  # noqa: E501
        """
        pass

    def test_cosmos_feegrant_v1_beta1_allowance(self):
        """Test case for cosmos_feegrant_v1_beta1_allowance

        Allowance returns fee granted to the grantee by the granter.  # noqa: E501
        """
        pass

    def test_cosmos_feegrant_v1_beta1_allowances(self):
        """Test case for cosmos_feegrant_v1_beta1_allowances

        Allowances returns all the grants for address.  # noqa: E501
        """
        pass

    def test_cosmos_feegrant_v1_beta1_allowances_by_granter(self):
        """Test case for cosmos_feegrant_v1_beta1_allowances_by_granter

        AllowancesByGranter returns all the grants given by an address  # noqa: E501
        """
        pass

    def test_cosmos_gov_v1_beta1_deposit(self):
        """Test case for cosmos_gov_v1_beta1_deposit

        Deposit queries single deposit information based proposalID, depositAddr.  # noqa: E501
        """
        pass

    def test_cosmos_gov_v1_beta1_deposits(self):
        """Test case for cosmos_gov_v1_beta1_deposits

        Deposits queries all deposits of a single proposal.  # noqa: E501
        """
        pass

    def test_cosmos_gov_v1_beta1_params(self):
        """Test case for cosmos_gov_v1_beta1_params

        Params queries all parameters of the gov module.  # noqa: E501
        """
        pass

    def test_cosmos_gov_v1_beta1_proposal(self):
        """Test case for cosmos_gov_v1_beta1_proposal

        Proposal queries proposal details based on ProposalID.  # noqa: E501
        """
        pass

    def test_cosmos_gov_v1_beta1_proposals(self):
        """Test case for cosmos_gov_v1_beta1_proposals

        Proposals queries all proposals based on given status.  # noqa: E501
        """
        pass

    def test_cosmos_gov_v1_beta1_tally_result(self):
        """Test case for cosmos_gov_v1_beta1_tally_result

        TallyResult queries the tally of a proposal vote.  # noqa: E501
        """
        pass

    def test_cosmos_gov_v1_beta1_vote(self):
        """Test case for cosmos_gov_v1_beta1_vote

        Vote queries voted information based on proposalID, voterAddr.  # noqa: E501
        """
        pass

    def test_cosmos_gov_v1_beta1_votes(self):
        """Test case for cosmos_gov_v1_beta1_votes

        Votes queries votes of a given proposal.  # noqa: E501
        """
        pass

    def test_cosmos_gov_v1_deposit(self):
        """Test case for cosmos_gov_v1_deposit

        Deposit queries single deposit information based proposalID, depositAddr.  # noqa: E501
        """
        pass

    def test_cosmos_gov_v1_deposits(self):
        """Test case for cosmos_gov_v1_deposits

        Deposits queries all deposits of a single proposal.  # noqa: E501
        """
        pass

    def test_cosmos_gov_v1_params(self):
        """Test case for cosmos_gov_v1_params

        Params queries all parameters of the gov module.  # noqa: E501
        """
        pass

    def test_cosmos_gov_v1_proposal(self):
        """Test case for cosmos_gov_v1_proposal

        Proposal queries proposal details based on ProposalID.  # noqa: E501
        """
        pass

    def test_cosmos_gov_v1_proposals(self):
        """Test case for cosmos_gov_v1_proposals

        Proposals queries all proposals based on given status.  # noqa: E501
        """
        pass

    def test_cosmos_gov_v1_tally_result(self):
        """Test case for cosmos_gov_v1_tally_result

        TallyResult queries the tally of a proposal vote.  # noqa: E501
        """
        pass

    def test_cosmos_gov_v1_vote(self):
        """Test case for cosmos_gov_v1_vote

        Vote queries voted information based on proposalID, voterAddr.  # noqa: E501
        """
        pass

    def test_cosmos_gov_v1_votes(self):
        """Test case for cosmos_gov_v1_votes

        Votes queries votes of a given proposal.  # noqa: E501
        """
        pass

    def test_cosmos_group_v1_group_info(self):
        """Test case for cosmos_group_v1_group_info

        GroupInfo queries group info based on group id.  # noqa: E501
        """
        pass

    def test_cosmos_group_v1_group_members(self):
        """Test case for cosmos_group_v1_group_members

        GroupMembers queries members of a group by group id.  # noqa: E501
        """
        pass

    def test_cosmos_group_v1_groups(self):
        """Test case for cosmos_group_v1_groups

        Groups queries all groups in state.  # noqa: E501
        """
        pass

    def test_cosmos_group_v1_groups_by_admin(self):
        """Test case for cosmos_group_v1_groups_by_admin

        GroupsByAdmin queries groups by admin address.  # noqa: E501
        """
        pass

    def test_cosmos_group_v1_groups_by_member(self):
        """Test case for cosmos_group_v1_groups_by_member

        GroupsByMember queries groups by member address.  # noqa: E501
        """
        pass

    def test_cosmos_mint_v1_beta1_annual_provisions(self):
        """Test case for cosmos_mint_v1_beta1_annual_provisions

        AnnualProvisions current minting annual provisions value.  # noqa: E501
        """
        pass

    def test_cosmos_mint_v1_beta1_inflation(self):
        """Test case for cosmos_mint_v1_beta1_inflation

        Inflation returns the current minting inflation value.  # noqa: E501
        """
        pass

    def test_cosmos_mint_v1_beta1_params(self):
        """Test case for cosmos_mint_v1_beta1_params

        Params returns the total set of minting parameters.  # noqa: E501
        """
        pass

    def test_cosmos_nft_v1_beta1_balance(self):
        """Test case for cosmos_nft_v1_beta1_balance

        Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721  # noqa: E501
        """
        pass

    def test_cosmos_nft_v1_beta1_class(self):
        """Test case for cosmos_nft_v1_beta1_class

        Class queries an NFT class based on its id  # noqa: E501
        """
        pass

    def test_cosmos_nft_v1_beta1_classes(self):
        """Test case for cosmos_nft_v1_beta1_classes

        Classes queries all NFT classes  # noqa: E501
        """
        pass

    def test_cosmos_nft_v1_beta1_nft(self):
        """Test case for cosmos_nft_v1_beta1_nft

        NFT queries an NFT based on its class and id.  # noqa: E501
        """
        pass

    def test_cosmos_nft_v1_beta1_nfts(self):
        """Test case for cosmos_nft_v1_beta1_nfts

        NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in ERC721Enumerable  # noqa: E501
        """
        pass

    def test_cosmos_nft_v1_beta1_owner(self):
        """Test case for cosmos_nft_v1_beta1_owner

        Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721  # noqa: E501
        """
        pass

    def test_cosmos_nft_v1_beta1_supply(self):
        """Test case for cosmos_nft_v1_beta1_supply

        Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.  # noqa: E501
        """
        pass

    def test_cosmos_params_v1_beta1_params(self):
        """Test case for cosmos_params_v1_beta1_params

        Params queries a specific parameter of a module, given its subspace and key.  # noqa: E501
        """
        pass

    def test_cosmos_params_v1_beta1_subspaces(self):
        """Test case for cosmos_params_v1_beta1_subspaces

        Subspaces queries for all registered subspaces and all keys for a subspace.  # noqa: E501
        """
        pass

    def test_cosmos_slashing_v1_beta1_params(self):
        """Test case for cosmos_slashing_v1_beta1_params

        Params queries the parameters of slashing module  # noqa: E501
        """
        pass

    def test_cosmos_slashing_v1_beta1_signing_info(self):
        """Test case for cosmos_slashing_v1_beta1_signing_info

        SigningInfo queries the signing info of given cons address  # noqa: E501
        """
        pass

    def test_cosmos_slashing_v1_beta1_signing_infos(self):
        """Test case for cosmos_slashing_v1_beta1_signing_infos

        SigningInfos queries signing info of all validators  # noqa: E501
        """
        pass

    def test_cosmos_staking_v1_beta1_delegation(self):
        """Test case for cosmos_staking_v1_beta1_delegation

        Delegation queries delegate info for given validator delegator pair.  # noqa: E501
        """
        pass

    def test_cosmos_staking_v1_beta1_fixed_deposit(self):
        """Test case for cosmos_staking_v1_beta1_fixed_deposit

        Queries a list of FixedDeposit items.  # noqa: E501
        """
        pass

    def test_cosmos_staking_v1_beta1_fixed_deposit_all(self):
        """Test case for cosmos_staking_v1_beta1_fixed_deposit_all

        """
        pass

    def test_cosmos_staking_v1_beta1_fixed_deposit_by_acct(self):
        """Test case for cosmos_staking_v1_beta1_fixed_deposit_by_acct

        Queries a list of FixedDepositByAcct items.  # noqa: E501
        """
        pass

    def test_cosmos_staking_v1_beta1_fixed_deposit_by_region(self):
        """Test case for cosmos_staking_v1_beta1_fixed_deposit_by_region

        Queries a list of FixedDepositByRegion items.  # noqa: E501
        """
        pass

    def test_cosmos_staking_v1_beta1_fixed_deposit_interest_rate(self):
        """Test case for cosmos_staking_v1_beta1_fixed_deposit_interest_rate

        Queries FixedDepositInterest Item.  # noqa: E501
        """
        pass

    def test_cosmos_staking_v1_beta1_historical_info(self):
        """Test case for cosmos_staking_v1_beta1_historical_info

        HistoricalInfo queries the historical info for given height.  # noqa: E501
        """
        pass

    def test_cosmos_staking_v1_beta1_kyc(self):
        """Test case for cosmos_staking_v1_beta1_kyc

        Queries a list of Kyc items.  # noqa: E501
        """
        pass

    def test_cosmos_staking_v1_beta1_kyc_all(self):
        """Test case for cosmos_staking_v1_beta1_kyc_all

        """
        pass

    def test_cosmos_staking_v1_beta1_kyc_by_region(self):
        """Test case for cosmos_staking_v1_beta1_kyc_by_region

        Queries a list of KycByRegion items.  # noqa: E501
        """
        pass

    def test_cosmos_staking_v1_beta1_params(self):
        """Test case for cosmos_staking_v1_beta1_params

        Parameters queries the staking parameters.  # noqa: E501
        """
        pass

    def test_cosmos_staking_v1_beta1_pool(self):
        """Test case for cosmos_staking_v1_beta1_pool

        Pool queries the pool info.  # noqa: E501
        """
        pass

    def test_cosmos_staking_v1_beta1_region(self):
        """Test case for cosmos_staking_v1_beta1_region

        Queries a list of Region items.  # noqa: E501
        """
        pass

    def test_cosmos_staking_v1_beta1_region_all(self):
        """Test case for cosmos_staking_v1_beta1_region_all

        """
        pass

    def test_cosmos_staking_v1_beta1_siid(self):
        """Test case for cosmos_staking_v1_beta1_siid

        """
        pass

    def test_cosmos_staking_v1_beta1_siid_all(self):
        """Test case for cosmos_staking_v1_beta1_siid_all

        """
        pass

    def test_cosmos_staking_v1_beta1_siid_by_account(self):
        """Test case for cosmos_staking_v1_beta1_siid_by_account

        """
        pass

    def test_cosmos_staking_v1_beta1_unbonding_delegation(self):
        """Test case for cosmos_staking_v1_beta1_unbonding_delegation

        UnbondingDelegation queries unbonding info for given validator delegator pair.  # noqa: E501
        """
        pass

    def test_cosmos_staking_v1_beta1_validator(self):
        """Test case for cosmos_staking_v1_beta1_validator

        Validator queries validator info for given validator address.  # noqa: E501
        """
        pass

    def test_cosmos_staking_v1_beta1_validator_delegations(self):
        """Test case for cosmos_staking_v1_beta1_validator_delegations

        ValidatorDelegations queries delegate info for given validator.  # noqa: E501
        """
        pass

    def test_cosmos_staking_v1_beta1_validators(self):
        """Test case for cosmos_staking_v1_beta1_validators

        Validators queries all validators that match the given status.  # noqa: E501
        """
        pass

    def test_cosmos_upgrade_v1_beta1_applied_plan(self):
        """Test case for cosmos_upgrade_v1_beta1_applied_plan

        AppliedPlan queries a previously applied upgrade plan by its name.  # noqa: E501
        """
        pass

    def test_cosmos_upgrade_v1_beta1_authority(self):
        """Test case for cosmos_upgrade_v1_beta1_authority

        Returns the account with authority to conduct upgrades  # noqa: E501
        """
        pass

    def test_cosmos_upgrade_v1_beta1_current_plan(self):
        """Test case for cosmos_upgrade_v1_beta1_current_plan

        CurrentPlan queries the current upgrade plan.  # noqa: E501
        """
        pass

    def test_cosmos_upgrade_v1_beta1_module_versions(self):
        """Test case for cosmos_upgrade_v1_beta1_module_versions

        ModuleVersions queries the list of module versions from state.  # noqa: E501
        """
        pass

    def test_cosmos_upgrade_v1_beta1_upgraded_consensus_state(self):
        """Test case for cosmos_upgrade_v1_beta1_upgraded_consensus_state

        UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier This rpc is deprecated now that IBC has its own replacement (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)  # noqa: E501
        """
        pass

    def test_cosmwasm_wasm_v1_all_contract_state(self):
        """Test case for cosmwasm_wasm_v1_all_contract_state

        AllContractState gets all raw store data for a single contract  # noqa: E501
        """
        pass

    def test_cosmwasm_wasm_v1_code(self):
        """Test case for cosmwasm_wasm_v1_code

        Code gets the binary code and metadata for a singe wasm code  # noqa: E501
        """
        pass

    def test_cosmwasm_wasm_v1_codes(self):
        """Test case for cosmwasm_wasm_v1_codes

        Codes gets the metadata for all stored wasm codes  # noqa: E501
        """
        pass

    def test_cosmwasm_wasm_v1_contract_history(self):
        """Test case for cosmwasm_wasm_v1_contract_history

        ContractHistory gets the contract code history  # noqa: E501
        """
        pass

    def test_cosmwasm_wasm_v1_contract_info(self):
        """Test case for cosmwasm_wasm_v1_contract_info

        ContractInfo gets the contract meta data  # noqa: E501
        """
        pass

    def test_cosmwasm_wasm_v1_contracts_by_code(self):
        """Test case for cosmwasm_wasm_v1_contracts_by_code

        ContractsByCode lists all smart contracts for a code id  # noqa: E501
        """
        pass

    def test_cosmwasm_wasm_v1_contracts_by_creator(self):
        """Test case for cosmwasm_wasm_v1_contracts_by_creator

        ContractsByCreator gets the contracts by creator  # noqa: E501
        """
        pass

    def test_cosmwasm_wasm_v1_params(self):
        """Test case for cosmwasm_wasm_v1_params

        Params gets the module params  # noqa: E501
        """
        pass

    def test_cosmwasm_wasm_v1_pinned_codes(self):
        """Test case for cosmwasm_wasm_v1_pinned_codes

        PinnedCodes gets the pinned code ids  # noqa: E501
        """
        pass

    def test_cosmwasm_wasm_v1_raw_contract_state(self):
        """Test case for cosmwasm_wasm_v1_raw_contract_state

        RawContractState gets single key from the raw store data of a contract  # noqa: E501
        """
        pass

    def test_cosmwasm_wasm_v1_smart_contract_state(self):
        """Test case for cosmwasm_wasm_v1_smart_contract_state

        SmartContractState get smart query result from the contract  # noqa: E501
        """
        pass

    def test_ibc_applications_fee_v1_counterparty_payee(self):
        """Test case for ibc_applications_fee_v1_counterparty_payee

        CounterpartyPayee returns the registered counterparty payee for forward relaying  # noqa: E501
        """
        pass

    def test_ibc_applications_fee_v1_fee_enabled_channel(self):
        """Test case for ibc_applications_fee_v1_fee_enabled_channel

        FeeEnabledChannel returns true if the provided port and channel identifiers belong to a fee enabled channel  # noqa: E501
        """
        pass

    def test_ibc_applications_fee_v1_fee_enabled_channels(self):
        """Test case for ibc_applications_fee_v1_fee_enabled_channels

        FeeEnabledChannels returns a list of all fee enabled channels  # noqa: E501
        """
        pass

    def test_ibc_applications_fee_v1_incentivized_packet(self):
        """Test case for ibc_applications_fee_v1_incentivized_packet

        IncentivizedPacket returns all packet fees for a packet given its identifier  # noqa: E501
        """
        pass

    def test_ibc_applications_fee_v1_incentivized_packets(self):
        """Test case for ibc_applications_fee_v1_incentivized_packets

        IncentivizedPackets returns all incentivized packets and their associated fees  # noqa: E501
        """
        pass

    def test_ibc_applications_fee_v1_incentivized_packets_for_channel(self):
        """Test case for ibc_applications_fee_v1_incentivized_packets_for_channel

        Gets all incentivized packets for a specific channel  # noqa: E501
        """
        pass

    def test_ibc_applications_fee_v1_payee(self):
        """Test case for ibc_applications_fee_v1_payee

        Payee returns the registered payee address for a specific channel given the relayer address  # noqa: E501
        """
        pass

    def test_ibc_applications_fee_v1_total_ack_fees(self):
        """Test case for ibc_applications_fee_v1_total_ack_fees

        TotalAckFees returns the total acknowledgement fees for a packet given its identifier  # noqa: E501
        """
        pass

    def test_ibc_applications_fee_v1_total_recv_fees(self):
        """Test case for ibc_applications_fee_v1_total_recv_fees

        TotalRecvFees returns the total receive fees for a packet given its identifier  # noqa: E501
        """
        pass

    def test_ibc_applications_fee_v1_total_timeout_fees(self):
        """Test case for ibc_applications_fee_v1_total_timeout_fees

        TotalTimeoutFees returns the total timeout fees for a packet given its identifier  # noqa: E501
        """
        pass

    def test_ibc_applications_interchain_accounts_controller_v1_interchain_account(self):
        """Test case for ibc_applications_interchain_accounts_controller_v1_interchain_account

        InterchainAccount returns the interchain account address for a given owner address on a given connection  # noqa: E501
        """
        pass

    def test_ibc_applications_interchain_accounts_controller_v1_params(self):
        """Test case for ibc_applications_interchain_accounts_controller_v1_params

        Params queries all parameters of the ICA controller submodule.  # noqa: E501
        """
        pass

    def test_ibc_applications_interchain_accounts_host_v1_params(self):
        """Test case for ibc_applications_interchain_accounts_host_v1_params

        Params queries all parameters of the ICA host submodule.  # noqa: E501
        """
        pass

    def test_ibc_applications_transfer_v1_denom_hash(self):
        """Test case for ibc_applications_transfer_v1_denom_hash

        DenomHash queries a denomination hash information.  # noqa: E501
        """
        pass

    def test_ibc_applications_transfer_v1_denom_trace(self):
        """Test case for ibc_applications_transfer_v1_denom_trace

        DenomTrace queries a denomination trace information.  # noqa: E501
        """
        pass

    def test_ibc_applications_transfer_v1_denom_traces(self):
        """Test case for ibc_applications_transfer_v1_denom_traces

        DenomTraces queries all denomination traces.  # noqa: E501
        """
        pass

    def test_ibc_applications_transfer_v1_escrow_address(self):
        """Test case for ibc_applications_transfer_v1_escrow_address

        EscrowAddress returns the escrow address for a particular port and channel id.  # noqa: E501
        """
        pass

    def test_ibc_applications_transfer_v1_params(self):
        """Test case for ibc_applications_transfer_v1_params

        Params queries all parameters of the ibc-transfer module.  # noqa: E501
        """
        pass

    def test_ibc_applications_transfer_v1_total_escrow_for_denom(self):
        """Test case for ibc_applications_transfer_v1_total_escrow_for_denom

        TotalEscrowForDenom returns the total amount of tokens in escrow based on the denom.  # noqa: E501
        """
        pass

    def test_ibc_core_channel_v1_channel(self):
        """Test case for ibc_core_channel_v1_channel

        Channel queries an IBC Channel.  # noqa: E501
        """
        pass

    def test_ibc_core_channel_v1_channel_client_state(self):
        """Test case for ibc_core_channel_v1_channel_client_state

        ChannelClientState queries for the client state for the channel associated with the provided channel identifiers.  # noqa: E501
        """
        pass

    def test_ibc_core_channel_v1_channel_consensus_state(self):
        """Test case for ibc_core_channel_v1_channel_consensus_state

        ChannelConsensusState queries for the consensus state for the channel associated with the provided channel identifiers.  # noqa: E501
        """
        pass

    def test_ibc_core_channel_v1_channels(self):
        """Test case for ibc_core_channel_v1_channels

        Channels queries all the IBC channels of a chain.  # noqa: E501
        """
        pass

    def test_ibc_core_channel_v1_connection_channels(self):
        """Test case for ibc_core_channel_v1_connection_channels

        ConnectionChannels queries all the channels associated with a connection end.  # noqa: E501
        """
        pass

    def test_ibc_core_channel_v1_next_sequence_receive(self):
        """Test case for ibc_core_channel_v1_next_sequence_receive

        NextSequenceReceive returns the next receive sequence for a given channel.  # noqa: E501
        """
        pass

    def test_ibc_core_channel_v1_packet_acknowledgement(self):
        """Test case for ibc_core_channel_v1_packet_acknowledgement

        PacketAcknowledgement queries a stored packet acknowledgement hash.  # noqa: E501
        """
        pass

    def test_ibc_core_channel_v1_packet_acknowledgements(self):
        """Test case for ibc_core_channel_v1_packet_acknowledgements

        PacketAcknowledgements returns all the packet acknowledgements associated with a channel.  # noqa: E501
        """
        pass

    def test_ibc_core_channel_v1_packet_commitment(self):
        """Test case for ibc_core_channel_v1_packet_commitment

        PacketCommitment queries a stored packet commitment hash.  # noqa: E501
        """
        pass

    def test_ibc_core_channel_v1_packet_commitments(self):
        """Test case for ibc_core_channel_v1_packet_commitments

        PacketCommitments returns all the packet commitments hashes associated with a channel.  # noqa: E501
        """
        pass

    def test_ibc_core_channel_v1_packet_receipt(self):
        """Test case for ibc_core_channel_v1_packet_receipt

        PacketReceipt queries if a given packet sequence has been received on the queried chain  # noqa: E501
        """
        pass

    def test_ibc_core_channel_v1_unreceived_acks(self):
        """Test case for ibc_core_channel_v1_unreceived_acks

        UnreceivedAcks returns all the unreceived IBC acknowledgements associated with a channel and sequences.  # noqa: E501
        """
        pass

    def test_ibc_core_channel_v1_unreceived_packets(self):
        """Test case for ibc_core_channel_v1_unreceived_packets

        UnreceivedPackets returns all the unreceived IBC packets associated with a channel and sequences.  # noqa: E501
        """
        pass

    def test_ibc_core_client_v1_client_params(self):
        """Test case for ibc_core_client_v1_client_params

        ClientParams queries all parameters of the ibc client submodule.  # noqa: E501
        """
        pass

    def test_ibc_core_client_v1_client_state(self):
        """Test case for ibc_core_client_v1_client_state

        ClientState queries an IBC light client.  # noqa: E501
        """
        pass

    def test_ibc_core_client_v1_client_states(self):
        """Test case for ibc_core_client_v1_client_states

        ClientStates queries all the IBC light clients of a chain.  # noqa: E501
        """
        pass

    def test_ibc_core_client_v1_client_status(self):
        """Test case for ibc_core_client_v1_client_status

        Status queries the status of an IBC client.  # noqa: E501
        """
        pass

    def test_ibc_core_client_v1_consensus_state(self):
        """Test case for ibc_core_client_v1_consensus_state

        ConsensusState queries a consensus state associated with a client state at a given height.  # noqa: E501
        """
        pass

    def test_ibc_core_client_v1_consensus_state_heights(self):
        """Test case for ibc_core_client_v1_consensus_state_heights

        ConsensusStateHeights queries the height of every consensus states associated with a given client.  # noqa: E501
        """
        pass

    def test_ibc_core_client_v1_consensus_states(self):
        """Test case for ibc_core_client_v1_consensus_states

        ConsensusStates queries all the consensus state associated with a given client.  # noqa: E501
        """
        pass

    def test_ibc_core_client_v1_upgraded_client_state(self):
        """Test case for ibc_core_client_v1_upgraded_client_state

        UpgradedClientState queries an Upgraded IBC light client.  # noqa: E501
        """
        pass

    def test_ibc_core_client_v1_upgraded_consensus_state(self):
        """Test case for ibc_core_client_v1_upgraded_consensus_state

        UpgradedConsensusState queries an Upgraded IBC consensus state.  # noqa: E501
        """
        pass

    def test_ibc_core_connection_v1_client_connections(self):
        """Test case for ibc_core_connection_v1_client_connections

        ClientConnections queries the connection paths associated with a client state.  # noqa: E501
        """
        pass

    def test_ibc_core_connection_v1_connection(self):
        """Test case for ibc_core_connection_v1_connection

        Connection queries an IBC connection end.  # noqa: E501
        """
        pass

    def test_ibc_core_connection_v1_connection_client_state(self):
        """Test case for ibc_core_connection_v1_connection_client_state

        ConnectionClientState queries the client state associated with the connection.  # noqa: E501
        """
        pass

    def test_ibc_core_connection_v1_connection_consensus_state(self):
        """Test case for ibc_core_connection_v1_connection_consensus_state

        ConnectionConsensusState queries the consensus state associated with the connection.  # noqa: E501
        """
        pass

    def test_ibc_core_connection_v1_connection_params(self):
        """Test case for ibc_core_connection_v1_connection_params

        ConnectionParams queries all parameters of the ibc connection submodule.  # noqa: E501
        """
        pass

    def test_ibc_core_connection_v1_connections(self):
        """Test case for ibc_core_connection_v1_connections

        Connections queries all the IBC connections of a chain.  # noqa: E501
        """
        pass


if __name__ == '__main__':
    unittest.main()
